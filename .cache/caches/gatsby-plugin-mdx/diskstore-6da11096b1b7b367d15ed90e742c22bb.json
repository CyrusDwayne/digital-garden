{"expireTime":9007200867590241000,"key":"gatsby-plugin-mdx-entire-payload-68b06a8b0683aac8c64c54871eb68442-","val":{"mdast":{"type":"root","children":[{"type":"paragraph","children":[{"type":"image","title":null,"url":"https://res.cloudinary.com/dg3gyk0gu/image/upload/c_scale,w_400/v1592833720/maggieappleton.com/egghead-course-notes/fruit-comparison/thumb_2x.png","alt":"One small apple being compared to a large pile of apples","position":{"start":{"line":2,"column":1,"offset":1},"end":{"line":2,"column":207,"offset":207},"indent":[]}}],"position":{"start":{"line":2,"column":1,"offset":1},"end":{"line":2,"column":207,"offset":207},"indent":[]}},{"type":"jsx","value":"<IntroParagraph>","position":{"start":{"line":4,"column":1,"offset":209},"end":{"line":4,"column":17,"offset":225},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Comparing values is one of those essential developer skills that helps you write ","position":{"start":{"line":6,"column":1,"offset":227},"end":{"line":6,"column":82,"offset":308},"indent":[]}},{"type":"strong","children":[{"type":"text","value":"conditionals","position":{"start":{"line":6,"column":84,"offset":310},"end":{"line":6,"column":96,"offset":322},"indent":[]}}],"position":{"start":{"line":6,"column":82,"offset":308},"end":{"line":6,"column":98,"offset":324},"indent":[]}},{"type":"text","value":", ","position":{"start":{"line":6,"column":98,"offset":324},"end":{"line":6,"column":100,"offset":326},"indent":[]}},{"type":"strong","children":[{"type":"text","value":"if / then statements, filters","position":{"start":{"line":6,"column":102,"offset":328},"end":{"line":6,"column":131,"offset":357},"indent":[]}}],"position":{"start":{"line":6,"column":100,"offset":326},"end":{"line":6,"column":133,"offset":359},"indent":[]}},{"type":"text","value":", and plenty more. Here's the apples and oranges guide to using them in JavaScript.","position":{"start":{"line":6,"column":133,"offset":359},"end":{"line":6,"column":216,"offset":442},"indent":[]}}],"position":{"start":{"line":6,"column":1,"offset":227},"end":{"line":6,"column":216,"offset":442},"indent":[]}},{"type":"jsx","value":"</IntroParagraph>","position":{"start":{"line":8,"column":1,"offset":444},"end":{"line":8,"column":18,"offset":461},"indent":[]}},{"type":"jsx","value":"<BasicImage alt=\"Javascript's comparison operators give us a way of comparing values\" src=\"https://res.cloudinary.com/dg3gyk0gu/image/upload/v1592262865/maggieappleton.com/egghead-course-notes/fruit-comparison/FruitComparison_P1.png\" />","position":{"start":{"line":10,"column":1,"offset":463},"end":{"line":10,"column":237,"offset":699},"indent":[]}},{"type":"jsx","value":"<BasicImage alt=\"Equality comes in loose and strict varieties. You should always use strict equality.\" src=\"https://res.cloudinary.com/dg3gyk0gu/image/upload/v1592262864/maggieappleton.com/egghead-course-notes/fruit-comparison/FruitComparison_P2.png\" />","position":{"start":{"line":12,"column":1,"offset":701},"end":{"line":12,"column":254,"offset":954},"indent":[]}},{"type":"jsx","value":"<BasicImage alt=\"Inequality follows the same loose and strict rules as equality\" src=\"https://res.cloudinary.com/dg3gyk0gu/image/upload/v1592262862/maggieappleton.com/egghead-course-notes/fruit-comparison/FruitComparison_P3.png\" />","position":{"start":{"line":15,"column":1,"offset":957},"end":{"line":15,"column":232,"offset":1188},"indent":[]}},{"type":"jsx","value":"<BasicImage alt=\"Relational equality let's us check which value is greater\" src=\"https://res.cloudinary.com/dg3gyk0gu/image/upload/v1592262863/maggieappleton.com/egghead-course-notes/fruit-comparison/FruitComparison_P4.png\" />","position":{"start":{"line":18,"column":1,"offset":1191},"end":{"line":18,"column":227,"offset":1417},"indent":[]}},{"type":"heading","depth":4,"children":[{"type":"text","value":"Want more illustrated notes on web development?","position":{"start":{"line":20,"column":6,"offset":1424},"end":{"line":20,"column":53,"offset":1471},"indent":[]}}],"position":{"start":{"line":20,"column":1,"offset":1419},"end":{"line":20,"column":53,"offset":1471},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Take a look at ","position":{"start":{"line":22,"column":1,"offset":1473},"end":{"line":22,"column":16,"offset":1488},"indent":[]}},{"type":"link","title":null,"url":"/advancedjs","children":[{"type":"text","value":"JavaScript Bits You Skipped the First Time Around","position":{"start":{"line":22,"column":17,"offset":1489},"end":{"line":22,"column":66,"offset":1538},"indent":[]}}],"position":{"start":{"line":22,"column":16,"offset":1488},"end":{"line":22,"column":80,"offset":1552},"indent":[]}},{"type":"text","value":", ","position":{"start":{"line":22,"column":80,"offset":1552},"end":{"line":22,"column":82,"offset":1554},"indent":[]}},{"type":"link","title":null,"url":"/jsx","children":[{"type":"text","value":"JSX is a Lovechild","position":{"start":{"line":22,"column":83,"offset":1555},"end":{"line":22,"column":101,"offset":1573},"indent":[]}}],"position":{"start":{"line":22,"column":82,"offset":1554},"end":{"line":22,"column":108,"offset":1580},"indent":[]}},{"type":"text","value":" or ","position":{"start":{"line":22,"column":108,"offset":1580},"end":{"line":22,"column":112,"offset":1584},"indent":[]}},{"type":"link","title":null,"url":"/spread","children":[{"type":"text","value":"JavaScript's ...spread Operator","position":{"start":{"line":22,"column":113,"offset":1585},"end":{"line":22,"column":144,"offset":1616},"indent":[]}}],"position":{"start":{"line":22,"column":112,"offset":1584},"end":{"line":22,"column":154,"offset":1626},"indent":[]}}],"position":{"start":{"line":22,"column":1,"offset":1473},"end":{"line":22,"column":154,"offset":1626},"indent":[]}},{"type":"export","value":"export const _frontmatter = {\"title\":\"A Fruitful Guide to JavaScript's Comparison Operators\",\"slug\":\"fruit-comparison\",\"updated\":\"2019-02-14T00:00:00.000Z\",\"published\":true,\"type\":[\"note\"],\"topics\":[\"JavaScript\",\"Web Development\",\"Illustrated Notes\"],\"growthStage\":\"Evergreen\"}","position":{"start":{"line":24,"column":1,"offset":1628},"end":{"line":24,"column":278,"offset":1905},"indent":[]}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":24,"column":278,"offset":1905}}},"scopeImports":["import * as React from 'react'"],"scopeIdentifiers":["React"],"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"A Fruitful Guide to JavaScript's Comparison Operators\",\n  \"slug\": \"fruit-comparison\",\n  \"updated\": \"2019-02-14T00:00:00.000Z\",\n  \"published\": true,\n  \"type\": [\"note\"],\n  \"topics\": [\"JavaScript\", \"Web Development\", \"Illustrated Notes\"],\n  \"growthStage\": \"Evergreen\"\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar IntroParagraph = makeShortcode(\"IntroParagraph\");\nvar BasicImage = makeShortcode(\"BasicImage\");\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, mdx(\"img\", _extends({\n    parentName: \"p\"\n  }, {\n    \"src\": \"https://res.cloudinary.com/dg3gyk0gu/image/upload/c_scale,w_400/v1592833720/maggieappleton.com/egghead-course-notes/fruit-comparison/thumb_2x.png\",\n    \"alt\": \"One small apple being compared to a large pile of apples\"\n  }))), mdx(IntroParagraph, {\n    mdxType: \"IntroParagraph\"\n  }, mdx(\"p\", null, \"Comparing values is one of those essential developer skills that helps you write \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"conditionals\"), \", \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"if / then statements, filters\"), \", and plenty more. Here's the apples and oranges guide to using them in JavaScript.\")), mdx(BasicImage, {\n    alt: \"Javascript's comparison operators give us a way of comparing values\",\n    src: \"https://res.cloudinary.com/dg3gyk0gu/image/upload/v1592262865/maggieappleton.com/egghead-course-notes/fruit-comparison/FruitComparison_P1.png\",\n    mdxType: \"BasicImage\"\n  }), mdx(BasicImage, {\n    alt: \"Equality comes in loose and strict varieties. You should always use strict equality.\",\n    src: \"https://res.cloudinary.com/dg3gyk0gu/image/upload/v1592262864/maggieappleton.com/egghead-course-notes/fruit-comparison/FruitComparison_P2.png\",\n    mdxType: \"BasicImage\"\n  }), mdx(BasicImage, {\n    alt: \"Inequality follows the same loose and strict rules as equality\",\n    src: \"https://res.cloudinary.com/dg3gyk0gu/image/upload/v1592262862/maggieappleton.com/egghead-course-notes/fruit-comparison/FruitComparison_P3.png\",\n    mdxType: \"BasicImage\"\n  }), mdx(BasicImage, {\n    alt: \"Relational equality let's us check which value is greater\",\n    src: \"https://res.cloudinary.com/dg3gyk0gu/image/upload/v1592262863/maggieappleton.com/egghead-course-notes/fruit-comparison/FruitComparison_P4.png\",\n    mdxType: \"BasicImage\"\n  }), mdx(\"h4\", null, \"Want more illustrated notes on web development?\"), mdx(\"p\", null, \"Take a look at \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"/advancedjs\"\n  }), \"JavaScript Bits You Skipped the First Time Around\"), \", \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"/jsx\"\n  }), \"JSX is a Lovechild\"), \" or \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"/spread\"\n  }), \"JavaScript's ...spread Operator\")));\n}\n;\nMDXContent.isMDXComponent = true;","rawMDXOutput":"/* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n/* @jsx mdx */\n\nexport const _frontmatter = {\n  \"title\": \"A Fruitful Guide to JavaScript's Comparison Operators\",\n  \"slug\": \"fruit-comparison\",\n  \"updated\": \"2019-02-14T00:00:00.000Z\",\n  \"published\": true,\n  \"type\": [\"note\"],\n  \"topics\": [\"JavaScript\", \"Web Development\", \"Illustrated Notes\"],\n  \"growthStage\": \"Evergreen\"\n};\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n      console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n      return <div {...props}/>\n    };\nconst IntroParagraph = makeShortcode(\"IntroParagraph\");\nconst BasicImage = makeShortcode(\"BasicImage\");\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n    <p><img parentName=\"p\" {...{\n        \"src\": \"https://res.cloudinary.com/dg3gyk0gu/image/upload/c_scale,w_400/v1592833720/maggieappleton.com/egghead-course-notes/fruit-comparison/thumb_2x.png\",\n        \"alt\": \"One small apple being compared to a large pile of apples\"\n      }}></img></p>\n    <IntroParagraph mdxType=\"IntroParagraph\">\n      <p>{`Comparing values is one of those essential developer skills that helps you write `}<strong parentName=\"p\">{`conditionals`}</strong>{`, `}<strong parentName=\"p\">{`if / then statements, filters`}</strong>{`, and plenty more. Here's the apples and oranges guide to using them in JavaScript.`}</p>\n    </IntroParagraph>\n    <BasicImage alt=\"Javascript's comparison operators give us a way of comparing values\" src=\"https://res.cloudinary.com/dg3gyk0gu/image/upload/v1592262865/maggieappleton.com/egghead-course-notes/fruit-comparison/FruitComparison_P1.png\" mdxType=\"BasicImage\" />\n    <BasicImage alt=\"Equality comes in loose and strict varieties. You should always use strict equality.\" src=\"https://res.cloudinary.com/dg3gyk0gu/image/upload/v1592262864/maggieappleton.com/egghead-course-notes/fruit-comparison/FruitComparison_P2.png\" mdxType=\"BasicImage\" />\n    <BasicImage alt=\"Inequality follows the same loose and strict rules as equality\" src=\"https://res.cloudinary.com/dg3gyk0gu/image/upload/v1592262862/maggieappleton.com/egghead-course-notes/fruit-comparison/FruitComparison_P3.png\" mdxType=\"BasicImage\" />\n    <BasicImage alt=\"Relational equality let's us check which value is greater\" src=\"https://res.cloudinary.com/dg3gyk0gu/image/upload/v1592262863/maggieappleton.com/egghead-course-notes/fruit-comparison/FruitComparison_P4.png\" mdxType=\"BasicImage\" />\n    <h4>{`Want more illustrated notes on web development?`}</h4>\n    <p>{`Take a look at `}<a parentName=\"p\" {...{\n        \"href\": \"/advancedjs\"\n      }}>{`JavaScript Bits You Skipped the First Time Around`}</a>{`, `}<a parentName=\"p\" {...{\n        \"href\": \"/jsx\"\n      }}>{`JSX is a Lovechild`}</a>{` or `}<a parentName=\"p\" {...{\n        \"href\": \"/spread\"\n      }}>{`JavaScript's ...spread Operator`}</a></p>\n\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;"}}