{"expireTime":9007200867590240000,"key":"gatsby-plugin-mdx-entire-payload-6bcd31e90abf448573929b5936b1f778-","val":{"mdast":{"type":"root","children":[{"type":"jsx","value":"<Center>","position":{"start":{"line":2,"column":1,"offset":1},"end":{"line":2,"column":9,"offset":9},"indent":[]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Let's talk about ","position":{"start":{"line":4,"column":4,"offset":14},"end":{"line":4,"column":21,"offset":31},"indent":[]}},{"type":"strong","children":[{"type":"text","value":"immutable data","position":{"start":{"line":4,"column":23,"offset":33},"end":{"line":4,"column":37,"offset":47},"indent":[]}}],"position":{"start":{"line":4,"column":21,"offset":31},"end":{"line":4,"column":39,"offset":49},"indent":[]}}],"position":{"start":{"line":4,"column":1,"offset":11},"end":{"line":4,"column":39,"offset":49},"indent":[]}},{"type":"jsx","value":"</Center>","position":{"start":{"line":6,"column":1,"offset":51},"end":{"line":6,"column":10,"offset":60},"indent":[]}},{"type":"paragraph","children":[{"type":"image","title":null,"url":"https://res.cloudinary.com/dg3gyk0gu/image/upload/c_scale,w_500/v1592262593/maggieappleton.com/egghead-course-notes/immer/robo-socks.png","alt":"A robot and a pair of socks","position":{"start":{"line":8,"column":1,"offset":62},"end":{"line":8,"column":169,"offset":230},"indent":[]}}],"position":{"start":{"line":8,"column":1,"offset":62},"end":{"line":8,"column":169,"offset":230},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"With socks. And personal assistant bots.","position":{"start":{"line":10,"column":1,"offset":232},"end":{"line":10,"column":41,"offset":272},"indent":[]}},{"type":"break","position":{"start":{"line":10,"column":41,"offset":272},"end":{"line":11,"column":1,"offset":275},"indent":[1]}},{"type":"text","value":"I know, you're already so excited.","position":{"start":{"line":11,"column":1,"offset":275},"end":{"line":11,"column":35,"offset":309},"indent":[]}}],"position":{"start":{"line":10,"column":1,"offset":232},"end":{"line":11,"column":35,"offset":309},"indent":[1]}},{"type":"paragraph","children":[{"type":"strong","children":[{"type":"text","value":"Immutability","position":{"start":{"line":13,"column":3,"offset":313},"end":{"line":13,"column":15,"offset":325},"indent":[]}}],"position":{"start":{"line":13,"column":1,"offset":311},"end":{"line":13,"column":17,"offset":327},"indent":[]}},{"type":"text","value":" and ","position":{"start":{"line":13,"column":17,"offset":327},"end":{"line":13,"column":22,"offset":332},"indent":[]}},{"type":"strong","children":[{"type":"text","value":"state","position":{"start":{"line":13,"column":24,"offset":334},"end":{"line":13,"column":29,"offset":339},"indent":[]}}],"position":{"start":{"line":13,"column":22,"offset":332},"end":{"line":13,"column":31,"offset":341},"indent":[]}},{"type":"text","value":" are two developer buzzwords it took me forever to \"get.\"","position":{"start":{"line":13,"column":31,"offset":341},"end":{"line":13,"column":88,"offset":398},"indent":[]}}],"position":{"start":{"line":13,"column":1,"offset":311},"end":{"line":13,"column":88,"offset":398},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Their underlying meanings aren't necessarily that complex.","position":{"start":{"line":15,"column":1,"offset":400},"end":{"line":15,"column":59,"offset":458},"indent":[]}},{"type":"break","position":{"start":{"line":15,"column":59,"offset":458},"end":{"line":16,"column":1,"offset":461},"indent":[1]}},{"type":"text","value":"But it's tough to fully comprehend what they mean, and why they're important, until you see them in action.","position":{"start":{"line":16,"column":1,"offset":461},"end":{"line":16,"column":108,"offset":568},"indent":[]}}],"position":{"start":{"line":15,"column":1,"offset":400},"end":{"line":16,"column":108,"offset":568},"indent":[1]}},{"type":"paragraph","children":[{"type":"link","title":null,"url":"https://en.wikipedia.org/wiki/State_(computer_science)","children":[{"type":"text","value":"State","position":{"start":{"line":18,"column":2,"offset":571},"end":{"line":18,"column":7,"offset":576},"indent":[]}}],"position":{"start":{"line":18,"column":1,"offset":570},"end":{"line":18,"column":64,"offset":633},"indent":[]}},{"type":"text","value":" just means the way an application is at a single point in time.","position":{"start":{"line":18,"column":64,"offset":633},"end":{"line":18,"column":128,"offset":697},"indent":[]}}],"position":{"start":{"line":18,"column":1,"offset":570},"end":{"line":18,"column":128,"offset":697},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"For example, if we've typed ","position":{"start":{"line":20,"column":1,"offset":699},"end":{"line":20,"column":29,"offset":727},"indent":[]}},{"type":"emphasis","children":[{"type":"text","value":"\"how does CSS grid work\"","position":{"start":{"line":20,"column":30,"offset":728},"end":{"line":20,"column":54,"offset":752},"indent":[]}}],"position":{"start":{"line":20,"column":29,"offset":727},"end":{"line":20,"column":55,"offset":753},"indent":[]}},{"type":"text","value":" into the search bar, and there are three checkboxes ticked, and we have a dropdown menu open that's the current \"state\" of things.","position":{"start":{"line":20,"column":55,"offset":753},"end":{"line":20,"column":186,"offset":884},"indent":[]}},{"type":"break","position":{"start":{"line":20,"column":186,"offset":884},"end":{"line":21,"column":1,"offset":887},"indent":[1]}},{"type":"text","value":"If we close the menu that's a state change. ","position":{"start":{"line":21,"column":1,"offset":887},"end":{"line":21,"column":45,"offset":931},"indent":[]}}],"position":{"start":{"line":20,"column":1,"offset":699},"end":{"line":21,"column":45,"offset":931},"indent":[1]}},{"type":"paragraph","children":[{"type":"text","value":"Behind the scenes in apps we have to account for every state an app could be in (which gets expontential very quicky). This is usually called ","position":{"start":{"line":23,"column":1,"offset":933},"end":{"line":23,"column":143,"offset":1075},"indent":[]}},{"type":"link","title":null,"url":"https://codeburst.io/state-management-in-javascript-15d0d98837e1","children":[{"type":"text","value":"\"managing state\"","position":{"start":{"line":23,"column":144,"offset":1076},"end":{"line":23,"column":160,"offset":1092},"indent":[]}}],"position":{"start":{"line":23,"column":143,"offset":1075},"end":{"line":23,"column":227,"offset":1159},"indent":[]}},{"type":"text","value":" and appears to be a ","position":{"start":{"line":23,"column":227,"offset":1159},"end":{"line":23,"column":248,"offset":1180},"indent":[]}},{"type":"link","title":null,"url":"https://medium.com/razroo/the-history-of-javascript-state-management-in-2019-161491d588ed","children":[{"type":"text","value":"neverending problem","position":{"start":{"line":23,"column":249,"offset":1181},"end":{"line":23,"column":268,"offset":1200},"indent":[]}}],"position":{"start":{"line":23,"column":248,"offset":1180},"end":{"line":23,"column":360,"offset":1292},"indent":[]}}],"position":{"start":{"line":23,"column":1,"offset":933},"end":{"line":23,"column":360,"offset":1292},"indent":[]}},{"type":"thematicBreak","position":{"start":{"line":25,"column":1,"offset":1294},"end":{"line":25,"column":4,"offset":1297},"indent":[]}},{"type":"heading","depth":3,"children":[{"type":"strong","children":[{"type":"text","value":"Immutable State","position":{"start":{"line":27,"column":7,"offset":1305},"end":{"line":27,"column":22,"offset":1320},"indent":[]}}],"position":{"start":{"line":27,"column":5,"offset":1303},"end":{"line":27,"column":24,"offset":1322},"indent":[]}},{"type":"text","value":" is one approach to solving our complex state problem â€“ it simply means making a second copy of things before you change them.","position":{"start":{"line":27,"column":24,"offset":1322},"end":{"line":27,"column":150,"offset":1448},"indent":[]}}],"position":{"start":{"line":27,"column":1,"offset":1299},"end":{"line":27,"column":152,"offset":1450},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"It's the same as copying and pasting a new ","position":{"start":{"line":29,"column":1,"offset":1452},"end":{"line":29,"column":44,"offset":1495},"indent":[]}},{"type":"emphasis","children":[{"type":"text","value":"ImportantThing_Version2_Draft.md","position":{"start":{"line":29,"column":45,"offset":1496},"end":{"line":29,"column":77,"offset":1528},"indent":[]}}],"position":{"start":{"line":29,"column":44,"offset":1495},"end":{"line":29,"column":78,"offset":1529},"indent":[]}},{"type":"text","value":" document before liberally changing enourmous chunks of it.\nThen when you realise your poor editing choices and want to go back to the original version, it's there waiting for you.","position":{"start":{"line":29,"column":78,"offset":1529},"end":{"line":30,"column":121,"offset":1709},"indent":[1]}}],"position":{"start":{"line":29,"column":1,"offset":1452},"end":{"line":30,"column":121,"offset":1709},"indent":[1]}},{"type":"paragraph","children":[{"type":"text","value":"Writing ","position":{"start":{"line":32,"column":1,"offset":1711},"end":{"line":32,"column":9,"offset":1719},"indent":[]}},{"type":"link","title":null,"url":"https://en.wikipedia.org/wiki/Immutable_object","children":[{"type":"text","value":"immutable code","position":{"start":{"line":32,"column":10,"offset":1720},"end":{"line":32,"column":24,"offset":1734},"indent":[]}}],"position":{"start":{"line":32,"column":9,"offset":1719},"end":{"line":32,"column":73,"offset":1783},"indent":[]}},{"type":"text","value":" is a ","position":{"start":{"line":32,"column":73,"offset":1783},"end":{"line":32,"column":79,"offset":1789},"indent":[]}},{"type":"link","title":null,"url":"https://medium.com/tribalscale/understanding-immutability-fdd627b66e58","children":[{"type":"text","value":"wildly","position":{"start":{"line":32,"column":80,"offset":1790},"end":{"line":32,"column":86,"offset":1796},"indent":[]}}],"position":{"start":{"line":32,"column":79,"offset":1789},"end":{"line":32,"column":159,"offset":1869},"indent":[]}},{"type":"text","value":" ","position":{"start":{"line":32,"column":159,"offset":1869},"end":{"line":32,"column":160,"offset":1870},"indent":[]}},{"type":"link","title":null,"url":"https://itnext.io/why-concept-of-immutability-is-so-damn-important-for-a-beginner-front-end-developer-8da85b565c8e","children":[{"type":"text","value":"popular","position":{"start":{"line":32,"column":161,"offset":1871},"end":{"line":32,"column":168,"offset":1878},"indent":[]}}],"position":{"start":{"line":32,"column":160,"offset":1870},"end":{"line":32,"column":285,"offset":1995},"indent":[]}},{"type":"text","value":" concept in general. And a good idea when you don't want to muck everything up.  ","position":{"start":{"line":32,"column":285,"offset":1995},"end":{"line":32,"column":366,"offset":2076},"indent":[]}}],"position":{"start":{"line":32,"column":1,"offset":1711},"end":{"line":32,"column":366,"offset":2076},"indent":[]}},{"type":"thematicBreak","position":{"start":{"line":34,"column":1,"offset":2078},"end":{"line":34,"column":4,"offset":2081},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Okay now you're all caught up on the jargon. Lets get to some illustrated notes.","position":{"start":{"line":36,"column":1,"offset":2083},"end":{"line":36,"column":81,"offset":2163},"indent":[]}}],"position":{"start":{"line":36,"column":1,"offset":2083},"end":{"line":36,"column":81,"offset":2163},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"These are from a course ","position":{"start":{"line":38,"column":1,"offset":2165},"end":{"line":38,"column":25,"offset":2189},"indent":[]}},{"type":"link","title":null,"url":"https://twitter.com/mweststrate","children":[{"type":"text","value":"Michel Weststrate","position":{"start":{"line":38,"column":26,"offset":2190},"end":{"line":38,"column":43,"offset":2207},"indent":[]}}],"position":{"start":{"line":38,"column":25,"offset":2189},"end":{"line":38,"column":77,"offset":2241},"indent":[]}},{"type":"text","value":" made about their elegant new tool ","position":{"start":{"line":38,"column":77,"offset":2241},"end":{"line":38,"column":112,"offset":2276},"indent":[]}},{"type":"link","title":null,"url":"https://immerjs.github.io/immer/docs/introduction","children":[{"type":"text","value":"Immer","position":{"start":{"line":38,"column":113,"offset":2277},"end":{"line":38,"column":118,"offset":2282},"indent":[]}}],"position":{"start":{"line":38,"column":112,"offset":2276},"end":{"line":38,"column":170,"offset":2334},"indent":[]}},{"type":"text","value":" â€“ it helps handle manage immutable state in a sane way.","position":{"start":{"line":38,"column":170,"offset":2334},"end":{"line":38,"column":226,"offset":2390},"indent":[]}}],"position":{"start":{"line":38,"column":1,"offset":2165},"end":{"line":38,"column":226,"offset":2390},"indent":[]}},{"type":"jsx","value":"<a noTip href=\"https://egghead.io/courses/immutable-javascript-data-structures-with-immer\"><ImageFrame width=\"80%\" alt=\"Immutable JavaScript Data Structures with Immer\" src=\"https://og-image-egghead-course.now.sh/immutable-javascript-data-structures-with-immer?af=54fd64\" /></a>","position":{"start":{"line":40,"column":1,"offset":2392},"end":{"line":40,"column":279,"offset":2670},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":" Michel walks us through building a gifting app with React & Immer that seamlessly handles all the messy state work.","position":{"start":{"line":42,"column":1,"offset":2672},"end":{"line":42,"column":117,"offset":2788},"indent":[]}}],"position":{"start":{"line":42,"column":1,"offset":2672},"end":{"line":42,"column":117,"offset":2788},"indent":[]}},{"type":"jsx","value":" <BasicImage alt=\"Immer is a small JS library that makes working with immutable state easy and enjoyable. It's like a small assistant that helps you make copies and edits to documents.\" src=\"https://res.cloudinary.com/dg3gyk0gu/image/upload/c_scale,w_900/v1592262596/maggieappleton.com/egghead-course-notes/immer/immer-1.png\" />","position":{"start":{"line":44,"column":1,"offset":2790},"end":{"line":44,"column":329,"offset":3118},"indent":[]}},{"type":"jsx","value":" <BasicImage alt=\"Immer's produce function does all the work - it takes a state object and runs a draft function telling the state how it should change.\" src=\"https://res.cloudinary.com/dg3gyk0gu/image/upload/c_scale,w_900/v1592262597/maggieappleton.com/egghead-course-notes/immer/immer-2.png\" />","position":{"start":{"line":46,"column":1,"offset":3120},"end":{"line":46,"column":297,"offset":3416},"indent":[]}},{"type":"jsx","value":" <BasicImage alt=\"The product function supports currying - which is when we nest functions inside others to make our code composable\" src=\"https://res.cloudinary.com/dg3gyk0gu/image/upload/c_scale,w_900/v1592262597/maggieappleton.com/egghead-course-notes/immer/immer-3.png\" />","position":{"start":{"line":48,"column":1,"offset":3418},"end":{"line":48,"column":277,"offset":3694},"indent":[]}},{"type":"jsx","value":" <BasicImage alt=\"We can easily use immer with other libraries like React and write callback functions using immer's produce function\" src=\"https://res.cloudinary.com/dg3gyk0gu/image/upload/c_scale,w_900/v1592262596/maggieappleton.com/egghead-course-notes/immer/immer-4.png\" />","position":{"start":{"line":50,"column":1,"offset":3696},"end":{"line":50,"column":278,"offset":3973},"indent":[]}},{"type":"jsx","value":"<br />","position":{"start":{"line":52,"column":1,"offset":3975},"end":{"line":52,"column":7,"offset":3981},"indent":[]}},{"type":"jsx","value":"<TwoCol gridGap=\"3em\">","position":{"start":{"line":54,"column":1,"offset":3983},"end":{"line":54,"column":23,"offset":4005},"indent":[]}},{"type":"jsx","value":"<BasicImage style=\"max-width: 90%\" alt=\"CSS is awesome cup\" src=\"https://images-na.ssl-images-amazon.com/images/I/51graM2SdzL._SX466_.jpg\" />","position":{"start":{"line":56,"column":1,"offset":4007},"end":{"line":56,"column":142,"offset":4148},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":" Yes the cup in the illustration is based on this classic CSS one that I don't own, but kind of want to.","position":{"start":{"line":58,"column":1,"offset":4150},"end":{"line":58,"column":105,"offset":4254},"indent":[]}}],"position":{"start":{"line":58,"column":1,"offset":4150},"end":{"line":58,"column":105,"offset":4254},"indent":[]}},{"type":"jsx","value":" </TwoCol>","position":{"start":{"line":60,"column":1,"offset":4256},"end":{"line":60,"column":11,"offset":4266},"indent":[]}},{"type":"thematicBreak","position":{"start":{"line":62,"column":1,"offset":4268},"end":{"line":62,"column":4,"offset":4271},"indent":[]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"Want more illustrated notes on web development?","position":{"start":{"line":64,"column":5,"offset":4277},"end":{"line":64,"column":52,"offset":4324},"indent":[]}}],"position":{"start":{"line":64,"column":1,"offset":4273},"end":{"line":64,"column":52,"offset":4324},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Take a look at ","position":{"start":{"line":66,"column":1,"offset":4326},"end":{"line":66,"column":16,"offset":4341},"indent":[]}},{"type":"link","title":null,"url":"/cypress","children":[{"type":"text","value":"Testing Apps with Cypress","position":{"start":{"line":66,"column":17,"offset":4342},"end":{"line":66,"column":42,"offset":4367},"indent":[]}}],"position":{"start":{"line":66,"column":16,"offset":4341},"end":{"line":66,"column":53,"offset":4378},"indent":[]}},{"type":"text","value":", ","position":{"start":{"line":66,"column":53,"offset":4378},"end":{"line":66,"column":55,"offset":4380},"indent":[]}},{"type":"link","title":null,"url":"/contentful-gatsby","children":[{"type":"text","value":"The JAMStack, Gatsby & Contentful","position":{"start":{"line":66,"column":56,"offset":4381},"end":{"line":66,"column":89,"offset":4414},"indent":[]}}],"position":{"start":{"line":66,"column":55,"offset":4380},"end":{"line":66,"column":110,"offset":4435},"indent":[]}},{"type":"text","value":" or ","position":{"start":{"line":66,"column":110,"offset":4435},"end":{"line":66,"column":114,"offset":4439},"indent":[]}},{"type":"link","title":null,"url":"/es2019","children":[{"type":"text","value":"A Fresh Serving of JavaScript ES2019","position":{"start":{"line":66,"column":115,"offset":4440},"end":{"line":66,"column":151,"offset":4476},"indent":[]}}],"position":{"start":{"line":66,"column":114,"offset":4439},"end":{"line":66,"column":161,"offset":4486},"indent":[]}}],"position":{"start":{"line":66,"column":1,"offset":4326},"end":{"line":66,"column":161,"offset":4486},"indent":[]}},{"type":"export","value":"export const _frontmatter = {\"title\":\"Immutable Data with Immer and Personal Assistant Bots\",\"slug\":\"immer\",\"updated\":\"2019-08-10T00:00:00.000Z\",\"published\":true,\"type\":[\"note\"],\"growthStage\":\"Evergreen\",\"topics\":[\"Web Development\",\"Illustrated Notes\",\"JavaScript\"]}","position":{"start":{"line":68,"column":1,"offset":4488},"end":{"line":68,"column":267,"offset":4754},"indent":[]}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":68,"column":267,"offset":4754}}},"scopeImports":["import * as React from 'react'"],"scopeIdentifiers":["React"],"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Immutable Data with Immer and Personal Assistant Bots\",\n  \"slug\": \"immer\",\n  \"updated\": \"2019-08-10T00:00:00.000Z\",\n  \"published\": true,\n  \"type\": [\"note\"],\n  \"growthStage\": \"Evergreen\",\n  \"topics\": [\"Web Development\", \"Illustrated Notes\", \"JavaScript\"]\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar Center = makeShortcode(\"Center\");\nvar ImageFrame = makeShortcode(\"ImageFrame\");\nvar BasicImage = makeShortcode(\"BasicImage\");\nvar TwoCol = makeShortcode(\"TwoCol\");\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(Center, {\n    mdxType: \"Center\"\n  }, mdx(\"h2\", null, \"Let's talk about \", mdx(\"strong\", {\n    parentName: \"h2\"\n  }, \"immutable data\"))), mdx(\"p\", null, mdx(\"img\", _extends({\n    parentName: \"p\"\n  }, {\n    \"src\": \"https://res.cloudinary.com/dg3gyk0gu/image/upload/c_scale,w_500/v1592262593/maggieappleton.com/egghead-course-notes/immer/robo-socks.png\",\n    \"alt\": \"A robot and a pair of socks\"\n  }))), mdx(\"p\", null, \"With socks. And personal assistant bots.\", mdx(\"br\", {\n    parentName: \"p\"\n  }), \"\\n\", \"I know, you're already so excited.\"), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Immutability\"), \" and \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"state\"), \" are two developer buzzwords it took me forever to \\\"get.\\\"\"), mdx(\"p\", null, \"Their underlying meanings aren't necessarily that complex.\", mdx(\"br\", {\n    parentName: \"p\"\n  }), \"\\n\", \"But it's tough to fully comprehend what they mean, and why they're important, until you see them in action.\"), mdx(\"p\", null, mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://en.wikipedia.org/wiki/State_(computer_science)\"\n  }), \"State\"), \" just means the way an application is at a single point in time.\"), mdx(\"p\", null, \"For example, if we've typed \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"\\\"how does CSS grid work\\\"\"), \" into the search bar, and there are three checkboxes ticked, and we have a dropdown menu open that's the current \\\"state\\\" of things.\", mdx(\"br\", {\n    parentName: \"p\"\n  }), \"\\n\", \"If we close the menu that's a state change. \"), mdx(\"p\", null, \"Behind the scenes in apps we have to account for every state an app could be in (which gets expontential very quicky). This is usually called \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://codeburst.io/state-management-in-javascript-15d0d98837e1\"\n  }), \"\\\"managing state\\\"\"), \" and appears to be a \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://medium.com/razroo/the-history-of-javascript-state-management-in-2019-161491d588ed\"\n  }), \"neverending problem\")), mdx(\"hr\", null), mdx(\"h3\", null, mdx(\"strong\", {\n    parentName: \"h3\"\n  }, \"Immutable State\"), \" is one approach to solving our complex state problem \\u2013 it simply means making a second copy of things before you change them.\"), mdx(\"p\", null, \"It's the same as copying and pasting a new \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"ImportantThing_Version2_Draft.md\"), \" document before liberally changing enourmous chunks of it.\\nThen when you realise your poor editing choices and want to go back to the original version, it's there waiting for you.\"), mdx(\"p\", null, \"Writing \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://en.wikipedia.org/wiki/Immutable_object\"\n  }), \"immutable code\"), \" is a \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://medium.com/tribalscale/understanding-immutability-fdd627b66e58\"\n  }), \"wildly\"), \" \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://itnext.io/why-concept-of-immutability-is-so-damn-important-for-a-beginner-front-end-developer-8da85b565c8e\"\n  }), \"popular\"), \" concept in general. And a good idea when you don't want to muck everything up.  \"), mdx(\"hr\", null), mdx(\"p\", null, \"Okay now you're all caught up on the jargon. Lets get to some illustrated notes.\"), mdx(\"p\", null, \"These are from a course \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://twitter.com/mweststrate\"\n  }), \"Michel Weststrate\"), \" made about their elegant new tool \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://immerjs.github.io/immer/docs/introduction\"\n  }), \"Immer\"), \" \\u2013 it helps handle manage immutable state in a sane way.\"), mdx(\"a\", {\n    noTip: true,\n    href: \"https://egghead.io/courses/immutable-javascript-data-structures-with-immer\"\n  }, mdx(ImageFrame, {\n    width: \"80%\",\n    alt: \"Immutable JavaScript Data Structures with Immer\",\n    src: \"https://og-image-egghead-course.now.sh/immutable-javascript-data-structures-with-immer?af=54fd64\",\n    mdxType: \"ImageFrame\"\n  })), mdx(\"p\", null, \" Michel walks us through building a gifting app with React & Immer that seamlessly handles all the messy state work.\"), mdx(BasicImage, {\n    alt: \"Immer is a small JS library that makes working with immutable state easy and enjoyable. It's like a small assistant that helps you make copies and edits to documents.\",\n    src: \"https://res.cloudinary.com/dg3gyk0gu/image/upload/c_scale,w_900/v1592262596/maggieappleton.com/egghead-course-notes/immer/immer-1.png\",\n    mdxType: \"BasicImage\"\n  }), mdx(BasicImage, {\n    alt: \"Immer's produce function does all the work - it takes a state object and runs a draft function telling the state how it should change.\",\n    src: \"https://res.cloudinary.com/dg3gyk0gu/image/upload/c_scale,w_900/v1592262597/maggieappleton.com/egghead-course-notes/immer/immer-2.png\",\n    mdxType: \"BasicImage\"\n  }), mdx(BasicImage, {\n    alt: \"The product function supports currying - which is when we nest functions inside others to make our code composable\",\n    src: \"https://res.cloudinary.com/dg3gyk0gu/image/upload/c_scale,w_900/v1592262597/maggieappleton.com/egghead-course-notes/immer/immer-3.png\",\n    mdxType: \"BasicImage\"\n  }), mdx(BasicImage, {\n    alt: \"We can easily use immer with other libraries like React and write callback functions using immer's produce function\",\n    src: \"https://res.cloudinary.com/dg3gyk0gu/image/upload/c_scale,w_900/v1592262596/maggieappleton.com/egghead-course-notes/immer/immer-4.png\",\n    mdxType: \"BasicImage\"\n  }), mdx(\"br\", null), mdx(TwoCol, {\n    gridGap: \"3em\",\n    mdxType: \"TwoCol\"\n  }, mdx(BasicImage, {\n    style: {\n      \"maxWidth\": \"90%\"\n    },\n    alt: \"CSS is awesome cup\",\n    src: \"https://images-na.ssl-images-amazon.com/images/I/51graM2SdzL._SX466_.jpg\",\n    mdxType: \"BasicImage\"\n  }), mdx(\"p\", null, \" Yes the cup in the illustration is based on this classic CSS one that I don't own, but kind of want to.\")), mdx(\"hr\", null), mdx(\"h3\", null, \"Want more illustrated notes on web development?\"), mdx(\"p\", null, \"Take a look at \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"/cypress\"\n  }), \"Testing Apps with Cypress\"), \", \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"/contentful-gatsby\"\n  }), \"The JAMStack, Gatsby & Contentful\"), \" or \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"/es2019\"\n  }), \"A Fresh Serving of JavaScript ES2019\")));\n}\n;\nMDXContent.isMDXComponent = true;","rawMDXOutput":"/* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n/* @jsx mdx */\n\nexport const _frontmatter = {\n  \"title\": \"Immutable Data with Immer and Personal Assistant Bots\",\n  \"slug\": \"immer\",\n  \"updated\": \"2019-08-10T00:00:00.000Z\",\n  \"published\": true,\n  \"type\": [\"note\"],\n  \"growthStage\": \"Evergreen\",\n  \"topics\": [\"Web Development\", \"Illustrated Notes\", \"JavaScript\"]\n};\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n      console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n      return <div {...props}/>\n    };\nconst Center = makeShortcode(\"Center\");\nconst ImageFrame = makeShortcode(\"ImageFrame\");\nconst BasicImage = makeShortcode(\"BasicImage\");\nconst TwoCol = makeShortcode(\"TwoCol\");\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n    <Center mdxType=\"Center\">\n      <h2>{`Let's talk about `}<strong parentName=\"h2\">{`immutable data`}</strong></h2>\n    </Center>\n    <p><img parentName=\"p\" {...{\n        \"src\": \"https://res.cloudinary.com/dg3gyk0gu/image/upload/c_scale,w_500/v1592262593/maggieappleton.com/egghead-course-notes/immer/robo-socks.png\",\n        \"alt\": \"A robot and a pair of socks\"\n      }}></img></p>\n    <p>{`With socks. And personal assistant bots.`}<br parentName=\"p\"></br>{`\n`}{`I know, you're already so excited.`}</p>\n    <p><strong parentName=\"p\">{`Immutability`}</strong>{` and `}<strong parentName=\"p\">{`state`}</strong>{` are two developer buzzwords it took me forever to \"get.\"`}</p>\n    <p>{`Their underlying meanings aren't necessarily that complex.`}<br parentName=\"p\"></br>{`\n`}{`But it's tough to fully comprehend what they mean, and why they're important, until you see them in action.`}</p>\n    <p><a parentName=\"p\" {...{\n        \"href\": \"https://en.wikipedia.org/wiki/State_(computer_science)\"\n      }}>{`State`}</a>{` just means the way an application is at a single point in time.`}</p>\n    <p>{`For example, if we've typed `}<em parentName=\"p\">{`\"how does CSS grid work\"`}</em>{` into the search bar, and there are three checkboxes ticked, and we have a dropdown menu open that's the current \"state\" of things.`}<br parentName=\"p\"></br>{`\n`}{`If we close the menu that's a state change. `}</p>\n    <p>{`Behind the scenes in apps we have to account for every state an app could be in (which gets expontential very quicky). This is usually called `}<a parentName=\"p\" {...{\n        \"href\": \"https://codeburst.io/state-management-in-javascript-15d0d98837e1\"\n      }}>{`\"managing state\"`}</a>{` and appears to be a `}<a parentName=\"p\" {...{\n        \"href\": \"https://medium.com/razroo/the-history-of-javascript-state-management-in-2019-161491d588ed\"\n      }}>{`neverending problem`}</a></p>\n    <hr></hr>\n    <h3><strong parentName=\"h3\">{`Immutable State`}</strong>{` is one approach to solving our complex state problem â€“ it simply means making a second copy of things before you change them.`}</h3>\n    <p>{`It's the same as copying and pasting a new `}<em parentName=\"p\">{`ImportantThing_Version2_Draft.md`}</em>{` document before liberally changing enourmous chunks of it.\nThen when you realise your poor editing choices and want to go back to the original version, it's there waiting for you.`}</p>\n    <p>{`Writing `}<a parentName=\"p\" {...{\n        \"href\": \"https://en.wikipedia.org/wiki/Immutable_object\"\n      }}>{`immutable code`}</a>{` is a `}<a parentName=\"p\" {...{\n        \"href\": \"https://medium.com/tribalscale/understanding-immutability-fdd627b66e58\"\n      }}>{`wildly`}</a>{` `}<a parentName=\"p\" {...{\n        \"href\": \"https://itnext.io/why-concept-of-immutability-is-so-damn-important-for-a-beginner-front-end-developer-8da85b565c8e\"\n      }}>{`popular`}</a>{` concept in general. And a good idea when you don't want to muck everything up.  `}</p>\n    <hr></hr>\n    <p>{`Okay now you're all caught up on the jargon. Lets get to some illustrated notes.`}</p>\n    <p>{`These are from a course `}<a parentName=\"p\" {...{\n        \"href\": \"https://twitter.com/mweststrate\"\n      }}>{`Michel Weststrate`}</a>{` made about their elegant new tool `}<a parentName=\"p\" {...{\n        \"href\": \"https://immerjs.github.io/immer/docs/introduction\"\n      }}>{`Immer`}</a>{` â€“ it helps handle manage immutable state in a sane way.`}</p>\n    <a noTip href=\"https://egghead.io/courses/immutable-javascript-data-structures-with-immer\"><ImageFrame width=\"80%\" alt=\"Immutable JavaScript Data Structures with Immer\" src=\"https://og-image-egghead-course.now.sh/immutable-javascript-data-structures-with-immer?af=54fd64\" mdxType=\"ImageFrame\" /></a>\n    <p>{` Michel walks us through building a gifting app with React & Immer that seamlessly handles all the messy state work.`}</p>\n <BasicImage alt=\"Immer is a small JS library that makes working with immutable state easy and enjoyable. It's like a small assistant that helps you make copies and edits to documents.\" src=\"https://res.cloudinary.com/dg3gyk0gu/image/upload/c_scale,w_900/v1592262596/maggieappleton.com/egghead-course-notes/immer/immer-1.png\" mdxType=\"BasicImage\" />\n <BasicImage alt=\"Immer's produce function does all the work - it takes a state object and runs a draft function telling the state how it should change.\" src=\"https://res.cloudinary.com/dg3gyk0gu/image/upload/c_scale,w_900/v1592262597/maggieappleton.com/egghead-course-notes/immer/immer-2.png\" mdxType=\"BasicImage\" />\n <BasicImage alt=\"The product function supports currying - which is when we nest functions inside others to make our code composable\" src=\"https://res.cloudinary.com/dg3gyk0gu/image/upload/c_scale,w_900/v1592262597/maggieappleton.com/egghead-course-notes/immer/immer-3.png\" mdxType=\"BasicImage\" />\n <BasicImage alt=\"We can easily use immer with other libraries like React and write callback functions using immer's produce function\" src=\"https://res.cloudinary.com/dg3gyk0gu/image/upload/c_scale,w_900/v1592262596/maggieappleton.com/egghead-course-notes/immer/immer-4.png\" mdxType=\"BasicImage\" />\n    <br />\n    <TwoCol gridGap=\"3em\" mdxType=\"TwoCol\">\n      <BasicImage style=\"max-width: 90%\" alt=\"CSS is awesome cup\" src=\"https://images-na.ssl-images-amazon.com/images/I/51graM2SdzL._SX466_.jpg\" mdxType=\"BasicImage\" />\n      <p>{` Yes the cup in the illustration is based on this classic CSS one that I don't own, but kind of want to.`}</p>\n </TwoCol>\n    <hr></hr>\n    <h3>{`Want more illustrated notes on web development?`}</h3>\n    <p>{`Take a look at `}<a parentName=\"p\" {...{\n        \"href\": \"/cypress\"\n      }}>{`Testing Apps with Cypress`}</a>{`, `}<a parentName=\"p\" {...{\n        \"href\": \"/contentful-gatsby\"\n      }}>{`The JAMStack, Gatsby & Contentful`}</a>{` or `}<a parentName=\"p\" {...{\n        \"href\": \"/es2019\"\n      }}>{`A Fresh Serving of JavaScript ES2019`}</a></p>\n\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;"}}