{"expireTime":9007200867590241000,"key":"gatsby-plugin-mdx-entire-payload-4d47d9e4a131e308ffb8ea766bf4b390-","val":{"mdast":{"type":"root","children":[{"type":"jsx","value":"<IntroParagraph>","position":{"start":{"line":2,"column":1,"offset":1},"end":{"line":2,"column":17,"offset":17},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Spreading the elements from one array and copying them into is one of those handy shorthands for moving data around in JavaScript.","position":{"start":{"line":4,"column":1,"offset":19},"end":{"line":4,"column":131,"offset":149},"indent":[]}}],"position":{"start":{"line":4,"column":1,"offset":19},"end":{"line":4,"column":131,"offset":149},"indent":[]}},{"type":"jsx","value":"</IntroParagraph>","position":{"start":{"line":6,"column":1,"offset":151},"end":{"line":6,"column":18,"offset":168},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"I started looking into it after seeing  ","position":{"start":{"line":8,"column":1,"offset":170},"end":{"line":8,"column":41,"offset":210},"indent":[]}},{"type":"inlineCode","value":"<ComponentName {...props} />","position":{"start":{"line":8,"column":41,"offset":210},"end":{"line":8,"column":71,"offset":240},"indent":[]}},{"type":"text","value":" in lots of React projects, and couldn't figure out what on earth was going on with the props syntax.","position":{"start":{"line":8,"column":71,"offset":240},"end":{"line":8,"column":172,"offset":341},"indent":[]}}],"position":{"start":{"line":8,"column":1,"offset":170},"end":{"line":8,"column":172,"offset":341},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Mystery solved...","position":{"start":{"line":10,"column":1,"offset":343},"end":{"line":10,"column":18,"offset":360},"indent":[]}}],"position":{"start":{"line":10,"column":1,"offset":343},"end":{"line":10,"column":18,"offset":360},"indent":[]}},{"type":"jsx","value":"<BasicImage alt=\"JavaScript's spread operator copies the content of one array, and dumps them out into another\" src=\"https://res.cloudinary.com/dg3gyk0gu/image/upload/c_scale,w_900/v1592262848/maggieappleton.com/egghead-course-notes/Spread.png\" />","position":{"start":{"line":12,"column":1,"offset":362},"end":{"line":12,"column":248,"offset":609},"indent":[]}},{"type":"heading","depth":4,"children":[{"type":"text","value":"Want more illustrated notes on web development?","position":{"start":{"line":14,"column":6,"offset":616},"end":{"line":14,"column":53,"offset":663},"indent":[]}}],"position":{"start":{"line":14,"column":1,"offset":611},"end":{"line":14,"column":53,"offset":663},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Take a look at [","position":{"start":{"line":16,"column":1,"offset":665},"end":{"line":16,"column":17,"offset":681},"indent":[]}},{"type":"linkReference","identifier":"jsx is a lovechild","label":"JSX is a Lovechild","referenceType":"shortcut","children":[{"type":"text","value":"JSX is a Lovechild","position":{"start":{"line":16,"column":18,"offset":682},"end":{"line":16,"column":36,"offset":700},"indent":[]}}],"position":{"start":{"line":16,"column":17,"offset":681},"end":{"line":16,"column":37,"offset":701},"indent":[]}},{"type":"text","value":"], [","position":{"start":{"line":16,"column":37,"offset":701},"end":{"line":16,"column":41,"offset":705},"indent":[]}},{"type":"linkReference","identifier":"how are compilers & transpilers different?","label":"How Are Compilers & Transpilers Different?","referenceType":"shortcut","children":[{"type":"text","value":"How Are Compilers & Transpilers Different?","position":{"start":{"line":16,"column":42,"offset":706},"end":{"line":16,"column":84,"offset":748},"indent":[]}}],"position":{"start":{"line":16,"column":41,"offset":705},"end":{"line":16,"column":85,"offset":749},"indent":[]}},{"type":"text","value":"] or [","position":{"start":{"line":16,"column":85,"offset":749},"end":{"line":16,"column":91,"offset":755},"indent":[]}},{"type":"linkReference","identifier":"a fruitful guide to javascript's comparison operators","label":"A Fruitful Guide to JavaScript's Comparison Operators","referenceType":"shortcut","children":[{"type":"text","value":"A Fruitful Guide to JavaScript's Comparison Operators","position":{"start":{"line":16,"column":92,"offset":756},"end":{"line":16,"column":145,"offset":809},"indent":[]}}],"position":{"start":{"line":16,"column":91,"offset":755},"end":{"line":16,"column":146,"offset":810},"indent":[]}},{"type":"text","value":"]","position":{"start":{"line":16,"column":146,"offset":810},"end":{"line":16,"column":147,"offset":811},"indent":[]}}],"position":{"start":{"line":16,"column":1,"offset":665},"end":{"line":16,"column":147,"offset":811},"indent":[]}},{"type":"export","value":"export const _frontmatter = {\"title\":\"JavaScript's ...spread Operator\",\"slug\":\"spread\",\"updated\":\"2019-01-20T00:00:00.000Z\",\"published\":true,\"type\":[\"note\"],\"topics\":[\"JavaScript\",\"Illustrated Notes\",\"Web Development\"],\"growthStage\":\"Evergreen\"}","position":{"start":{"line":18,"column":1,"offset":813},"end":{"line":18,"column":246,"offset":1058},"indent":[]}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":18,"column":246,"offset":1058}}},"scopeImports":["import * as React from 'react'"],"scopeIdentifiers":["React"],"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"JavaScript's ...spread Operator\",\n  \"slug\": \"spread\",\n  \"updated\": \"2019-01-20T00:00:00.000Z\",\n  \"published\": true,\n  \"type\": [\"note\"],\n  \"topics\": [\"JavaScript\", \"Illustrated Notes\", \"Web Development\"],\n  \"growthStage\": \"Evergreen\"\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar IntroParagraph = makeShortcode(\"IntroParagraph\");\nvar BasicImage = makeShortcode(\"BasicImage\");\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(IntroParagraph, {\n    mdxType: \"IntroParagraph\"\n  }, mdx(\"p\", null, \"Spreading the elements from one array and copying them into is one of those handy shorthands for moving data around in JavaScript.\")), mdx(\"p\", null, \"I started looking into it after seeing  \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"<ComponentName {...props} />\"), \" in lots of React projects, and couldn't figure out what on earth was going on with the props syntax.\"), mdx(\"p\", null, \"Mystery solved...\"), mdx(BasicImage, {\n    alt: \"JavaScript's spread operator copies the content of one array, and dumps them out into another\",\n    src: \"https://res.cloudinary.com/dg3gyk0gu/image/upload/c_scale,w_900/v1592262848/maggieappleton.com/egghead-course-notes/Spread.png\",\n    mdxType: \"BasicImage\"\n  }), mdx(\"h4\", null, \"Want more illustrated notes on web development?\"), mdx(\"p\", null, \"Take a look at [\", \"[JSX is a Lovechild]\", \"], [\", \"[How Are Compilers & Transpilers Different?]\", \"] or [\", \"[A Fruitful Guide to JavaScript's Comparison Operators]\", \"]\"));\n}\n;\nMDXContent.isMDXComponent = true;","rawMDXOutput":"/* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n/* @jsx mdx */\n\nexport const _frontmatter = {\n  \"title\": \"JavaScript's ...spread Operator\",\n  \"slug\": \"spread\",\n  \"updated\": \"2019-01-20T00:00:00.000Z\",\n  \"published\": true,\n  \"type\": [\"note\"],\n  \"topics\": [\"JavaScript\", \"Illustrated Notes\", \"Web Development\"],\n  \"growthStage\": \"Evergreen\"\n};\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n      console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n      return <div {...props}/>\n    };\nconst IntroParagraph = makeShortcode(\"IntroParagraph\");\nconst BasicImage = makeShortcode(\"BasicImage\");\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n    <IntroParagraph mdxType=\"IntroParagraph\">\n      <p>{`Spreading the elements from one array and copying them into is one of those handy shorthands for moving data around in JavaScript.`}</p>\n    </IntroParagraph>\n    <p>{`I started looking into it after seeing  `}<inlineCode parentName=\"p\">{`<ComponentName {...props} />`}</inlineCode>{` in lots of React projects, and couldn't figure out what on earth was going on with the props syntax.`}</p>\n    <p>{`Mystery solved...`}</p>\n    <BasicImage alt=\"JavaScript's spread operator copies the content of one array, and dumps them out into another\" src=\"https://res.cloudinary.com/dg3gyk0gu/image/upload/c_scale,w_900/v1592262848/maggieappleton.com/egghead-course-notes/Spread.png\" mdxType=\"BasicImage\" />\n    <h4>{`Want more illustrated notes on web development?`}</h4>\n    <p>{`Take a look at [`}{`[JSX is a Lovechild]`}{`], [`}{`[How Are Compilers & Transpilers Different?]`}{`] or [`}{`[A Fruitful Guide to JavaScript's Comparison Operators]`}{`]`}</p>\n\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;"}}