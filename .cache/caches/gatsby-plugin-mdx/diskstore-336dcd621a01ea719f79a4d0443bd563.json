{"expireTime":9007200867590238000,"key":"gatsby-plugin-mdx-entire-payload-3dd8953171718aceec98b743ad2354cd-","val":{"mdast":{"type":"root","children":[{"type":"jsx","value":"<IntroParagraph>","position":{"start":{"line":2,"column":1,"offset":1},"end":{"line":2,"column":17,"offset":17},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Using the ","position":{"start":{"line":4,"column":1,"offset":19},"end":{"line":4,"column":11,"offset":29},"indent":[]}},{"type":"link","title":null,"url":"https://greensock.com/","children":[{"type":"text","value":"GreenSock","position":{"start":{"line":4,"column":12,"offset":30},"end":{"line":4,"column":21,"offset":39},"indent":[]}}],"position":{"start":{"line":4,"column":11,"offset":29},"end":{"line":4,"column":46,"offset":64},"indent":[]}},{"type":"text","value":" web animation library (also known as gsap) in vanilla JavaScript isn't too complex. But when we want it to play nicely with a frontend framework like React, we run into some finicky issues.","position":{"start":{"line":4,"column":46,"offset":64},"end":{"line":4,"column":236,"offset":254},"indent":[]}}],"position":{"start":{"line":4,"column":1,"offset":19},"end":{"line":4,"column":236,"offset":254},"indent":[]}},{"type":"jsx","value":"</IntroParagraph>","position":{"start":{"line":6,"column":1,"offset":256},"end":{"line":6,"column":18,"offset":273},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"This guide is specifically about using React Hooks with GreenSock, as many of the ","position":{"start":{"line":8,"column":1,"offset":275},"end":{"line":8,"column":83,"offset":357},"indent":[]}},{"type":"link","title":null,"url":"https://greensock.com/react/","children":[{"type":"text","value":"existing guides","position":{"start":{"line":8,"column":84,"offset":358},"end":{"line":8,"column":99,"offset":373},"indent":[]}}],"position":{"start":{"line":8,"column":83,"offset":357},"end":{"line":8,"column":130,"offset":404},"indent":[]}},{"type":"text","value":" only explain how to set it up with the old style of class components.","position":{"start":{"line":8,"column":130,"offset":404},"end":{"line":8,"column":200,"offset":474},"indent":[]}}],"position":{"start":{"line":8,"column":1,"offset":275},"end":{"line":8,"column":200,"offset":474},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"This isn't an introduction to the GreenSock library itself – head over to my post on ","position":{"start":{"line":10,"column":1,"offset":476},"end":{"line":10,"column":86,"offset":561},"indent":[]}},{"type":"link","title":null,"url":"/greensock-essentials","children":[{"type":"text","value":"The Bare Essentials of Greensock","position":{"start":{"line":10,"column":87,"offset":562},"end":{"line":10,"column":119,"offset":594},"indent":[]}}],"position":{"start":{"line":10,"column":86,"offset":561},"end":{"line":10,"column":143,"offset":618},"indent":[]}},{"type":"text","value":" for that.","position":{"start":{"line":10,"column":143,"offset":618},"end":{"line":10,"column":153,"offset":628},"indent":[]}}],"position":{"start":{"line":10,"column":1,"offset":476},"end":{"line":10,"column":153,"offset":628},"indent":[]}},{"type":"jsx","value":"<br />","position":{"start":{"line":12,"column":1,"offset":630},"end":{"line":12,"column":7,"offset":636},"indent":[]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"React, Meet GreenSock","position":{"start":{"line":14,"column":4,"offset":641},"end":{"line":14,"column":25,"offset":662},"indent":[]}}],"position":{"start":{"line":14,"column":1,"offset":638},"end":{"line":14,"column":25,"offset":662},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"The issue with combining these two libraries is that React acts as a DOM interloper – it sits between the code we write and the DOM, managing it for us.","position":{"start":{"line":16,"column":1,"offset":664},"end":{"line":16,"column":153,"offset":816},"indent":[]}}],"position":{"start":{"line":16,"column":1,"offset":664},"end":{"line":16,"column":153,"offset":816},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"React builds it's own internal \"tree\" of DOM nodes based off our code, and only updates the actual DOM as needed (a concept previously known as the ","position":{"start":{"line":18,"column":1,"offset":818},"end":{"line":18,"column":149,"offset":966},"indent":[]}},{"type":"link","title":null,"url":"/react-vdom","children":[{"type":"text","value":"React Virtual DOM","position":{"start":{"line":18,"column":150,"offset":967},"end":{"line":18,"column":167,"offset":984},"indent":[]}}],"position":{"start":{"line":18,"column":149,"offset":966},"end":{"line":18,"column":181,"offset":998},"indent":[]}},{"type":"text","value":") ","position":{"start":{"line":18,"column":181,"offset":998},"end":{"line":18,"column":183,"offset":1000},"indent":[]}},{"type":"jsx","value":"<Footnote idName={1}>","position":{"start":{"line":18,"column":183,"offset":1000},"end":{"line":18,"column":204,"offset":1021},"indent":[]}},{"type":"text","value":"The React team has gone off the term of the ","position":{"start":{"line":18,"column":204,"offset":1021},"end":{"line":18,"column":248,"offset":1065},"indent":[]}},{"type":"emphasis","children":[{"type":"text","value":"virtual DOM","position":{"start":{"line":18,"column":249,"offset":1066},"end":{"line":18,"column":260,"offset":1077},"indent":[]}}],"position":{"start":{"line":18,"column":248,"offset":1065},"end":{"line":18,"column":261,"offset":1078},"indent":[]}},{"type":"text","value":" and prefer to talk about the ","position":{"start":{"line":18,"column":261,"offset":1078},"end":{"line":18,"column":291,"offset":1108},"indent":[]}},{"type":"emphasis","children":[{"type":"text","value":"render tree","position":{"start":{"line":18,"column":292,"offset":1109},"end":{"line":18,"column":303,"offset":1120},"indent":[]}}],"position":{"start":{"line":18,"column":291,"offset":1108},"end":{"line":18,"column":304,"offset":1121},"indent":[]}},{"type":"text","value":". Potatoes, potataos. For more on how the virtual DOM works, I have an ","position":{"start":{"line":18,"column":304,"offset":1121},"end":{"line":18,"column":375,"offset":1192},"indent":[]}},{"type":"link","title":null,"url":"/react-vdom","children":[{"type":"text","value":"illustrated guide","position":{"start":{"line":18,"column":376,"offset":1193},"end":{"line":18,"column":393,"offset":1210},"indent":[]}}],"position":{"start":{"line":18,"column":375,"offset":1192},"end":{"line":18,"column":407,"offset":1224},"indent":[]}},{"type":"jsx","value":"</Footnote>","position":{"start":{"line":18,"column":407,"offset":1224},"end":{"line":18,"column":418,"offset":1235},"indent":[]}}],"position":{"start":{"line":18,"column":1,"offset":818},"end":{"line":18,"column":418,"offset":1235},"indent":[]}},{"type":"jsx","value":"<FullWidthImage alt=\"A diagram of React generating all the DOM nodes for us\" src=\"https://res.cloudinary.com/dg3gyk0gu/image/upload/c_scale,f_auto,q_100,w_1400/v1600973172/maggieappleton.com/notes/gsap/react-greensock-2.png\" />","position":{"start":{"line":20,"column":1,"offset":1237},"end":{"line":20,"column":228,"offset":1464},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Meanwhile, the GreenSock library usually works by directly animating our DOM elements. Perhaps you can sense the tension in the room...","position":{"start":{"line":22,"column":1,"offset":1466},"end":{"line":22,"column":136,"offset":1601},"indent":[]}}],"position":{"start":{"line":22,"column":1,"offset":1466},"end":{"line":22,"column":136,"offset":1601},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Since the GreenSock library needs access to the DOM  in order to animate it, we need to tell React about our Greensock animations. Otherwise the two end up in awkward arguments that can end in tears (primarily mine).","position":{"start":{"line":24,"column":1,"offset":1603},"end":{"line":24,"column":217,"offset":1819},"indent":[]}}],"position":{"start":{"line":24,"column":1,"offset":1603},"end":{"line":24,"column":217,"offset":1819},"indent":[]}},{"type":"jsx","value":"<br />","position":{"start":{"line":26,"column":1,"offset":1821},"end":{"line":26,"column":7,"offset":1827},"indent":[]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Bring in the React Hooks","position":{"start":{"line":28,"column":4,"offset":1832},"end":{"line":28,"column":28,"offset":1856},"indent":[]}}],"position":{"start":{"line":28,"column":1,"offset":1829},"end":{"line":28,"column":28,"offset":1856},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"There's two essential React hooks we'll use to connect our React code to our  Greensock code: ","position":{"start":{"line":30,"column":1,"offset":1858},"end":{"line":30,"column":95,"offset":1952},"indent":[]}},{"type":"strong","children":[{"type":"text","value":"useRef","position":{"start":{"line":30,"column":97,"offset":1954},"end":{"line":30,"column":103,"offset":1960},"indent":[]}}],"position":{"start":{"line":30,"column":95,"offset":1952},"end":{"line":30,"column":105,"offset":1962},"indent":[]}},{"type":"text","value":" and ","position":{"start":{"line":30,"column":105,"offset":1962},"end":{"line":30,"column":110,"offset":1967},"indent":[]}},{"type":"strong","children":[{"type":"text","value":"useEffect","position":{"start":{"line":30,"column":112,"offset":1969},"end":{"line":30,"column":121,"offset":1978},"indent":[]}}],"position":{"start":{"line":30,"column":110,"offset":1967},"end":{"line":30,"column":123,"offset":1980},"indent":[]}}],"position":{"start":{"line":30,"column":1,"offset":1858},"end":{"line":30,"column":123,"offset":1980},"indent":[]}},{"type":"jsx","value":"<br />","position":{"start":{"line":32,"column":1,"offset":1982},"end":{"line":32,"column":7,"offset":1988},"indent":[]}},{"type":"jsx","value":"<SimpleCard width=\"740px\">","position":{"start":{"line":34,"column":1,"offset":1990},"end":{"line":34,"column":27,"offset":2016},"indent":[]}},{"type":"heading","depth":4,"children":[{"type":"strong","children":[{"type":"text","value":"useRef","position":{"start":{"line":36,"column":8,"offset":2025},"end":{"line":36,"column":14,"offset":2031},"indent":[]}}],"position":{"start":{"line":36,"column":6,"offset":2023},"end":{"line":36,"column":16,"offset":2033},"indent":[]}},{"type":"text","value":" lets us access and directly target our DOM nodes","position":{"start":{"line":36,"column":16,"offset":2033},"end":{"line":36,"column":65,"offset":2082},"indent":[]}}],"position":{"start":{"line":36,"column":1,"offset":2018},"end":{"line":36,"column":65,"offset":2082},"indent":[]}},{"type":"jsx","value":"</SimpleCard>","position":{"start":{"line":38,"column":1,"offset":2084},"end":{"line":38,"column":14,"offset":2097},"indent":[]}},{"type":"jsx","value":"<SimpleCard width=\"740px\">","position":{"start":{"line":40,"column":1,"offset":2099},"end":{"line":40,"column":27,"offset":2125},"indent":[]}},{"type":"heading","depth":4,"children":[{"type":"strong","children":[{"type":"text","value":"useEffect","position":{"start":{"line":42,"column":8,"offset":2134},"end":{"line":42,"column":17,"offset":2143},"indent":[]}}],"position":{"start":{"line":42,"column":6,"offset":2132},"end":{"line":42,"column":19,"offset":2145},"indent":[]}},{"type":"text","value":" lets us to perform side effects – any functions or data requests that we want to run ","position":{"start":{"line":42,"column":19,"offset":2145},"end":{"line":42,"column":105,"offset":2231},"indent":[]}},{"type":"emphasis","children":[{"type":"text","value":"after","position":{"start":{"line":42,"column":106,"offset":2232},"end":{"line":42,"column":111,"offset":2237},"indent":[]}}],"position":{"start":{"line":42,"column":105,"offset":2231},"end":{"line":42,"column":112,"offset":2238},"indent":[]}},{"type":"text","value":" rendering the component to the DOM","position":{"start":{"line":42,"column":112,"offset":2238},"end":{"line":42,"column":147,"offset":2273},"indent":[]}}],"position":{"start":{"line":42,"column":1,"offset":2127},"end":{"line":42,"column":147,"offset":2273},"indent":[]}},{"type":"jsx","value":"</SimpleCard>","position":{"start":{"line":44,"column":1,"offset":2275},"end":{"line":44,"column":14,"offset":2288},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"If you're not completely comfortable with ","position":{"start":{"line":46,"column":1,"offset":2290},"end":{"line":46,"column":43,"offset":2332},"indent":[]}},{"type":"link","title":null,"url":"https://www.freecodecamp.org/news/beginners-guide-to-using-react-hooks/","children":[{"type":"text","value":"React Hooks","position":{"start":{"line":46,"column":44,"offset":2333},"end":{"line":46,"column":55,"offset":2344},"indent":[]}}],"position":{"start":{"line":46,"column":43,"offset":2332},"end":{"line":46,"column":129,"offset":2418},"indent":[]}},{"type":"text","value":" yet and those technical explanations mean nothing to you, don't worry we're going to slowly walk through this.  With illustrations. Because  who the fork properly understands ","position":{"start":{"line":46,"column":129,"offset":2418},"end":{"line":46,"column":305,"offset":2594},"indent":[]}},{"type":"emphasis","children":[{"type":"text","value":"\"side effects\"","position":{"start":{"line":46,"column":306,"offset":2595},"end":{"line":46,"column":320,"offset":2609},"indent":[]}}],"position":{"start":{"line":46,"column":305,"offset":2594},"end":{"line":46,"column":321,"offset":2610},"indent":[]}},{"type":"text","value":"?","position":{"start":{"line":46,"column":321,"offset":2610},"end":{"line":46,"column":322,"offset":2611},"indent":[]}}],"position":{"start":{"line":46,"column":1,"offset":2290},"end":{"line":46,"column":322,"offset":2611},"indent":[]}},{"type":"thematicBreak","position":{"start":{"line":48,"column":1,"offset":2613},"end":{"line":48,"column":4,"offset":2616},"indent":[]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"Getting Setup","position":{"start":{"line":50,"column":5,"offset":2622},"end":{"line":50,"column":18,"offset":2635},"indent":[]}}],"position":{"start":{"line":50,"column":1,"offset":2618},"end":{"line":50,"column":18,"offset":2635},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"We first need to run ","position":{"start":{"line":52,"column":1,"offset":2637},"end":{"line":52,"column":22,"offset":2658},"indent":[]}},{"type":"inlineCode","value":"yarn install gsap","position":{"start":{"line":52,"column":22,"offset":2658},"end":{"line":52,"column":41,"offset":2677},"indent":[]}},{"type":"text","value":" or ","position":{"start":{"line":52,"column":41,"offset":2677},"end":{"line":52,"column":45,"offset":2681},"indent":[]}},{"type":"inlineCode","value":"npm install gsap","position":{"start":{"line":52,"column":45,"offset":2681},"end":{"line":52,"column":63,"offset":2699},"indent":[]}},{"type":"text","value":" into our React project repo ","position":{"start":{"line":52,"column":63,"offset":2699},"end":{"line":52,"column":92,"offset":2728},"indent":[]}},{"type":"jsx","value":"<Footnote idName={2}>","position":{"start":{"line":52,"column":92,"offset":2728},"end":{"line":52,"column":113,"offset":2749},"indent":[]}},{"type":"strong","children":[{"type":"text","value":"gsap","position":{"start":{"line":52,"column":115,"offset":2751},"end":{"line":52,"column":119,"offset":2755},"indent":[]}}],"position":{"start":{"line":52,"column":113,"offset":2749},"end":{"line":52,"column":121,"offset":2757},"indent":[]}},{"type":"text","value":" is short for ","position":{"start":{"line":52,"column":121,"offset":2757},"end":{"line":52,"column":135,"offset":2771},"indent":[]}},{"type":"emphasis","children":[{"type":"text","value":"GreenSock Animation Platform","position":{"start":{"line":52,"column":136,"offset":2772},"end":{"line":52,"column":164,"offset":2800},"indent":[]}}],"position":{"start":{"line":52,"column":135,"offset":2771},"end":{"line":52,"column":165,"offset":2801},"indent":[]}},{"type":"text","value":" and it's the way we reference the Greensock library in all our code sytax","position":{"start":{"line":52,"column":165,"offset":2801},"end":{"line":52,"column":239,"offset":2875},"indent":[]}},{"type":"jsx","value":"</Footnote>","position":{"start":{"line":52,"column":239,"offset":2875},"end":{"line":52,"column":250,"offset":2886},"indent":[]}}],"position":{"start":{"line":52,"column":1,"offset":2637},"end":{"line":52,"column":250,"offset":2886},"indent":[]}},{"type":"jsx","value":"<br />","position":{"start":{"line":54,"column":1,"offset":2888},"end":{"line":54,"column":7,"offset":2894},"indent":[]}},{"type":"jsx","value":"<SimpleCard width=\"740px\" center>","position":{"start":{"line":56,"column":1,"offset":2896},"end":{"line":56,"column":34,"offset":2929},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Feel free to open up a Codesandbox project to work through the steps while you read. I've set one up for you with React and Greensock already installed:","position":{"start":{"line":58,"column":1,"offset":2931},"end":{"line":58,"column":153,"offset":3083},"indent":[]}}],"position":{"start":{"line":58,"column":1,"offset":2931},"end":{"line":58,"column":153,"offset":3083},"indent":[]}},{"type":"jsx","value":"<p><a noTip href=\"https://codesandbox.io/s/reacthooks-greensock-demo-xjoti?file=/src/AnimatedBox.js\"><button style={{marginTop: '0.2em'}}>Jump into CodeSandbox</button> </a></p>","position":{"start":{"line":60,"column":1,"offset":3085},"end":{"line":60,"column":178,"offset":3262},"indent":[]}},{"type":"jsx","value":"</SimpleCard>","position":{"start":{"line":62,"column":1,"offset":3264},"end":{"line":62,"column":14,"offset":3277},"indent":[]}},{"type":"jsx","value":"<br />","position":{"start":{"line":64,"column":1,"offset":3279},"end":{"line":64,"column":7,"offset":3285},"indent":[]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"Building our Animation Component","position":{"start":{"line":66,"column":5,"offset":3291},"end":{"line":66,"column":37,"offset":3323},"indent":[]}}],"position":{"start":{"line":66,"column":1,"offset":3287},"end":{"line":66,"column":37,"offset":3323},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Let's start by creating a React component called ","position":{"start":{"line":68,"column":1,"offset":3325},"end":{"line":68,"column":50,"offset":3374},"indent":[]}},{"type":"inlineCode","value":"<AnimatedBox/>","position":{"start":{"line":68,"column":50,"offset":3374},"end":{"line":68,"column":66,"offset":3390},"indent":[]}},{"type":"text","value":" that is going to hold all our Greensock code. We're going to build a simple  ","position":{"start":{"line":68,"column":66,"offset":3390},"end":{"line":68,"column":144,"offset":3468},"indent":[]}},{"type":"inlineCode","value":"<div>","position":{"start":{"line":68,"column":144,"offset":3468},"end":{"line":68,"column":151,"offset":3475},"indent":[]}},{"type":"text","value":"  element and have it animate across the page (exciting!).","position":{"start":{"line":68,"column":151,"offset":3475},"end":{"line":68,"column":209,"offset":3533},"indent":[]}}],"position":{"start":{"line":68,"column":1,"offset":3325},"end":{"line":68,"column":209,"offset":3533},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"We'll need to import the Greensock library into our component with ","position":{"start":{"line":70,"column":1,"offset":3535},"end":{"line":70,"column":68,"offset":3602},"indent":[]}},{"type":"inlineCode","value":"import { gsap }from 'gsap'","position":{"start":{"line":70,"column":68,"offset":3602},"end":{"line":70,"column":96,"offset":3630},"indent":[]}},{"type":"text","value":", as well as React and our two hooks with ","position":{"start":{"line":70,"column":96,"offset":3630},"end":{"line":70,"column":138,"offset":3672},"indent":[]}},{"type":"inlineCode","value":"import React, { useRef, useEffect } from 'react'","position":{"start":{"line":70,"column":138,"offset":3672},"end":{"line":70,"column":188,"offset":3722},"indent":[]}}],"position":{"start":{"line":70,"column":1,"offset":3535},"end":{"line":70,"column":188,"offset":3722},"indent":[]}},{"type":"code","lang":"js","meta":null,"value":"import React, { useRef, useEffect } from 'react'\nimport { gsap }from 'gsap'\n\nconst Animation = () => {\n    return (\n        <div style={{\n            width: '160px',\n            height: '160px',\n            background: 'salmon'\n        }} />\n    )\n}\n","position":{"start":{"line":72,"column":1,"offset":3724},"end":{"line":86,"column":4,"offset":3984},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"jsx","value":"<p>I've set some basic width, height, and colour CSS styles on our div to make it visible on the page.</p>","position":{"start":{"line":88,"column":1,"offset":3986},"end":{"line":88,"column":107,"offset":4092},"indent":[]}},{"type":"jsx","value":"<div style={{ margin: '2em auto', width: '160px', height: '160px', background: 'salmon', borderRadius: '4px' }} />","position":{"start":{"line":90,"column":1,"offset":4094},"end":{"line":90,"column":115,"offset":4208},"indent":[]}},{"type":"jsx","value":"<Center>","position":{"start":{"line":92,"column":1,"offset":4210},"end":{"line":92,"column":9,"offset":4218},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Good looking div, right?","position":{"start":{"line":94,"column":1,"offset":4220},"end":{"line":94,"column":25,"offset":4244},"indent":[]}},{"type":"break","position":{"start":{"line":94,"column":25,"offset":4244},"end":{"line":95,"column":1,"offset":4247},"indent":[1]}},{"type":"text","value":"Salmon is always the right colour choice.","position":{"start":{"line":95,"column":1,"offset":4247},"end":{"line":95,"column":42,"offset":4288},"indent":[]}}],"position":{"start":{"line":94,"column":1,"offset":4220},"end":{"line":95,"column":42,"offset":4288},"indent":[1]}},{"type":"jsx","value":"</Center>","position":{"start":{"line":97,"column":1,"offset":4290},"end":{"line":97,"column":10,"offset":4299},"indent":[]}},{"type":"thematicBreak","position":{"start":{"line":102,"column":1,"offset":4304},"end":{"line":102,"column":4,"offset":4307},"indent":[]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Adding the useRef Hook","position":{"start":{"line":104,"column":4,"offset":4312},"end":{"line":104,"column":26,"offset":4334},"indent":[]}}],"position":{"start":{"line":104,"column":1,"offset":4309},"end":{"line":104,"column":26,"offset":4334},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"We're now going to add ","position":{"start":{"line":106,"column":1,"offset":4336},"end":{"line":106,"column":24,"offset":4359},"indent":[]}},{"type":"emphasis","children":[{"type":"text","value":"references","position":{"start":{"line":106,"column":25,"offset":4360},"end":{"line":106,"column":35,"offset":4370},"indent":[]}}],"position":{"start":{"line":106,"column":24,"offset":4359},"end":{"line":106,"column":36,"offset":4371},"indent":[]}},{"type":"text","value":" to our animation with the ","position":{"start":{"line":106,"column":36,"offset":4371},"end":{"line":106,"column":63,"offset":4398},"indent":[]}},{"type":"strong","children":[{"type":"text","value":"useRef","position":{"start":{"line":106,"column":65,"offset":4400},"end":{"line":106,"column":71,"offset":4406},"indent":[]}}],"position":{"start":{"line":106,"column":63,"offset":4398},"end":{"line":106,"column":73,"offset":4408},"indent":[]}},{"type":"text","value":" hook.","position":{"start":{"line":106,"column":73,"offset":4408},"end":{"line":106,"column":79,"offset":4414},"indent":[]}}],"position":{"start":{"line":106,"column":1,"offset":4336},"end":{"line":106,"column":79,"offset":4414},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"We create a new reference by adding ","position":{"start":{"line":108,"column":1,"offset":4416},"end":{"line":108,"column":37,"offset":4452},"indent":[]}},{"type":"inlineCode","value":"const boxRef = useRef()","position":{"start":{"line":108,"column":37,"offset":4452},"end":{"line":108,"column":62,"offset":4477},"indent":[]}},{"type":"text","value":" anywhere outside of our return statement. Call it anything you like, but ","position":{"start":{"line":108,"column":62,"offset":4477},"end":{"line":108,"column":136,"offset":4551},"indent":[]}},{"type":"emphasis","children":[{"type":"text","value":"boxRef","position":{"start":{"line":108,"column":137,"offset":4552},"end":{"line":108,"column":143,"offset":4558},"indent":[]}}],"position":{"start":{"line":108,"column":136,"offset":4551},"end":{"line":108,"column":144,"offset":4559},"indent":[]}},{"type":"text","value":" is a good enough name for this example.","position":{"start":{"line":108,"column":144,"offset":4559},"end":{"line":108,"column":184,"offset":4599},"indent":[]}}],"position":{"start":{"line":108,"column":1,"offset":4416},"end":{"line":108,"column":184,"offset":4599},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"We then add a ","position":{"start":{"line":110,"column":1,"offset":4601},"end":{"line":110,"column":15,"offset":4615},"indent":[]}},{"type":"inlineCode","value":"ref={boxRef}","position":{"start":{"line":110,"column":15,"offset":4615},"end":{"line":110,"column":29,"offset":4629},"indent":[]}},{"type":"text","value":" attribute on our ","position":{"start":{"line":110,"column":29,"offset":4629},"end":{"line":110,"column":47,"offset":4647},"indent":[]}},{"type":"inlineCode","value":"<div>","position":{"start":{"line":110,"column":47,"offset":4647},"end":{"line":110,"column":54,"offset":4654},"indent":[]}},{"type":"text","value":" element.","position":{"start":{"line":110,"column":54,"offset":4654},"end":{"line":110,"column":63,"offset":4663},"indent":[]}}],"position":{"start":{"line":110,"column":1,"offset":4601},"end":{"line":110,"column":63,"offset":4663},"indent":[]}},{"type":"code","lang":"js","meta":null,"value":"const Animation = () => {\n    const boxRef = useRef()\n\n    return (\n        <div ref={boxRef} style={{\n            width: '160px',\n            height: '160px',\n            background: 'salmon'\n        }} />\n    )\n}","position":{"start":{"line":112,"column":1,"offset":4665},"end":{"line":124,"column":4,"offset":4889},"indent":[1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"This tells React we want to be able to control our ","position":{"start":{"line":126,"column":1,"offset":4891},"end":{"line":126,"column":52,"offset":4942},"indent":[]}},{"type":"inlineCode","value":"<div>","position":{"start":{"line":126,"column":52,"offset":4942},"end":{"line":126,"column":59,"offset":4949},"indent":[]}},{"type":"text","value":" element with the ","position":{"start":{"line":126,"column":59,"offset":4949},"end":{"line":126,"column":77,"offset":4967},"indent":[]}},{"type":"inlineCode","value":"boxRef","position":{"start":{"line":126,"column":77,"offset":4967},"end":{"line":126,"column":85,"offset":4975},"indent":[]}},{"type":"text","value":" reference once our component is mounted onto the DOM.","position":{"start":{"line":126,"column":85,"offset":4975},"end":{"line":126,"column":139,"offset":5029},"indent":[]}}],"position":{"start":{"line":126,"column":1,"offset":4891},"end":{"line":126,"column":139,"offset":5029},"indent":[]}},{"type":"thematicBreak","position":{"start":{"line":128,"column":1,"offset":5031},"end":{"line":128,"column":4,"offset":5034},"indent":[]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Adding the useEffect Hook","position":{"start":{"line":130,"column":4,"offset":5039},"end":{"line":130,"column":29,"offset":5064},"indent":[]}}],"position":{"start":{"line":130,"column":1,"offset":5036},"end":{"line":130,"column":29,"offset":5064},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Next we're going to add our ","position":{"start":{"line":132,"column":1,"offset":5066},"end":{"line":132,"column":29,"offset":5094},"indent":[]}},{"type":"strong","children":[{"type":"text","value":"useEffect","position":{"start":{"line":132,"column":31,"offset":5096},"end":{"line":132,"column":40,"offset":5105},"indent":[]}}],"position":{"start":{"line":132,"column":29,"offset":5094},"end":{"line":132,"column":42,"offset":5107},"indent":[]}},{"type":"text","value":" hook, and write our GreenSock animation inside of it.","position":{"start":{"line":132,"column":42,"offset":5107},"end":{"line":132,"column":96,"offset":5161},"indent":[]}}],"position":{"start":{"line":132,"column":1,"offset":5066},"end":{"line":132,"column":96,"offset":5161},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"If you're already familiar with greensock this will look fairly straightforward.","position":{"start":{"line":134,"column":1,"offset":5163},"end":{"line":134,"column":81,"offset":5243},"indent":[]}}],"position":{"start":{"line":134,"column":1,"offset":5163},"end":{"line":134,"column":81,"offset":5243},"indent":[]}},{"type":"code","lang":"js","meta":null,"value":"const Animation = () => {\n    const boxRef = useRef()\n\n    useEffect(() => {\n        gsap.to([boxRef.current], {\n            x: '400px',\n            duration: 2\n        })\n    })\n\n    return (\n        <div ref={boxRef} style={{\n            width: '160px',\n            height: '160px',\n            background: 'salmon'\n        }} />\n    )\n}","position":{"start":{"line":136,"column":1,"offset":5245},"end":{"line":155,"column":4,"offset":5594},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":" We declare a normal ","position":{"start":{"line":157,"column":1,"offset":5596},"end":{"line":157,"column":22,"offset":5617},"indent":[]}},{"type":"inlineCode","value":"gsap.to()","position":{"start":{"line":157,"column":22,"offset":5617},"end":{"line":157,"column":33,"offset":5628},"indent":[]}},{"type":"text","value":" tween, but instead of passing in an id or class name as the target element, we use ","position":{"start":{"line":157,"column":33,"offset":5628},"end":{"line":157,"column":117,"offset":5712},"indent":[]}},{"type":"inlineCode","value":"[boxRef.current]","position":{"start":{"line":157,"column":117,"offset":5712},"end":{"line":157,"column":135,"offset":5730},"indent":[]}},{"type":"text","value":". ","position":{"start":{"line":157,"column":135,"offset":5730},"end":{"line":157,"column":137,"offset":5732},"indent":[]}}],"position":{"start":{"line":157,"column":1,"offset":5596},"end":{"line":157,"column":137,"offset":5732},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":" This means we want gsap to animate the ","position":{"start":{"line":159,"column":1,"offset":5735},"end":{"line":159,"column":41,"offset":5775},"indent":[]}},{"type":"inlineCode","value":".current","position":{"start":{"line":159,"column":41,"offset":5775},"end":{"line":159,"column":51,"offset":5785},"indent":[]}},{"type":"text","value":" property of our ","position":{"start":{"line":159,"column":51,"offset":5785},"end":{"line":159,"column":68,"offset":5802},"indent":[]}},{"type":"inlineCode","value":"boxRef","position":{"start":{"line":159,"column":68,"offset":5802},"end":{"line":159,"column":76,"offset":5810},"indent":[]}},{"type":"text","value":" reference – which is the ","position":{"start":{"line":159,"column":76,"offset":5810},"end":{"line":159,"column":102,"offset":5836},"indent":[]}},{"type":"inlineCode","value":"<div>","position":{"start":{"line":159,"column":102,"offset":5836},"end":{"line":159,"column":109,"offset":5843},"indent":[]}},{"type":"text","value":" element we put that reference on. ","position":{"start":{"line":159,"column":109,"offset":5843},"end":{"line":159,"column":144,"offset":5878},"indent":[]}}],"position":{"start":{"line":159,"column":1,"offset":5735},"end":{"line":159,"column":144,"offset":5878},"indent":[]}},{"type":"code","lang":"js","meta":null,"value":"gsap.to([boxRef.current], {\n\n})","position":{"start":{"line":160,"column":1,"offset":5879},"end":{"line":164,"column":4,"offset":5920},"indent":[1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":" We then pass in our variables object, which tells Greensock to move our div 400px along the ","position":{"start":{"line":166,"column":1,"offset":5922},"end":{"line":166,"column":94,"offset":6015},"indent":[]}},{"type":"emphasis","children":[{"type":"text","value":"x","position":{"start":{"line":166,"column":95,"offset":6016},"end":{"line":166,"column":96,"offset":6017},"indent":[]}}],"position":{"start":{"line":166,"column":94,"offset":6015},"end":{"line":166,"column":97,"offset":6018},"indent":[]}},{"type":"text","value":" axis over a duration of 2 seconds:","position":{"start":{"line":166,"column":97,"offset":6018},"end":{"line":166,"column":132,"offset":6053},"indent":[]}}],"position":{"start":{"line":166,"column":1,"offset":5922},"end":{"line":166,"column":132,"offset":6053},"indent":[]}},{"type":"code","lang":"js","meta":null,"value":"{ x: 400px, duration: 2 }","position":{"start":{"line":167,"column":1,"offset":6054},"end":{"line":169,"column":5,"offset":6092},"indent":[1,1]}},{"type":"paragraph","children":[{"type":"text","value":"And thus, our div animates...","position":{"start":{"line":171,"column":1,"offset":6094},"end":{"line":171,"column":30,"offset":6123},"indent":[]}}],"position":{"start":{"line":171,"column":1,"offset":6094},"end":{"line":171,"column":30,"offset":6123},"indent":[]}},{"type":"jsx","value":"<p>","position":{"start":{"line":173,"column":1,"offset":6125},"end":{"line":173,"column":4,"offset":6128},"indent":[]}},{"type":"jsx","value":"<Tween to={{\n    scrollTrigger: {\n        trigger: '#boxRef',\n        start: 'top 60%',\n        end: '+=500',\n        scrub: true,\n    },\n        x: '400px'\n    }} duration={2} ease=\"back.out(1.3)\">\n    <div id=\"boxRef\" style={{ margin: '2em', width: '160px', height: '160px', background: 'salmon', borderRadius: '4px' }} />\n</Tween>","position":{"start":{"line":175,"column":1,"offset":6130},"end":{"line":185,"column":9,"offset":6463},"indent":[1,1,1,1,1,1,1,1,1,1]}},{"type":"jsx","value":"</p>","position":{"start":{"line":187,"column":1,"offset":6465},"end":{"line":187,"column":5,"offset":6469},"indent":[]}},{"type":"jsx","value":"<Center>","position":{"start":{"line":189,"column":1,"offset":6471},"end":{"line":189,"column":9,"offset":6479},"indent":[]}},{"type":"heading","depth":1,"children":[{"type":"text","value":"Tada ","position":{"start":{"line":191,"column":3,"offset":6483},"end":{"line":191,"column":8,"offset":6488},"indent":[]}},{"type":"jsx","value":"<span>","position":{"start":{"line":191,"column":8,"offset":6488},"end":{"line":191,"column":14,"offset":6494},"indent":[]}},{"type":"text","value":"🎉","position":{"start":{"line":191,"column":14,"offset":6494},"end":{"line":191,"column":16,"offset":6496},"indent":[]}},{"type":"jsx","value":"</span>","position":{"start":{"line":191,"column":16,"offset":6496},"end":{"line":191,"column":23,"offset":6503},"indent":[]}}],"position":{"start":{"line":191,"column":1,"offset":6481},"end":{"line":191,"column":23,"offset":6503},"indent":[]}},{"type":"jsx","value":"</Center>","position":{"start":{"line":193,"column":1,"offset":6505},"end":{"line":193,"column":10,"offset":6514},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"So by this point, you hopefully have a working animation in that ","position":{"start":{"line":195,"column":1,"offset":6516},"end":{"line":195,"column":66,"offset":6581},"indent":[]}},{"type":"link","title":null,"url":"https://codesandbox.io/s/reacthooks-greensock-demo-xjoti?file=/src/AnimatedBox.js","children":[{"type":"text","value":"Codesandbox project","position":{"start":{"line":195,"column":67,"offset":6582},"end":{"line":195,"column":86,"offset":6601},"indent":[]}}],"position":{"start":{"line":195,"column":66,"offset":6581},"end":{"line":195,"column":170,"offset":6685},"indent":[]}},{"type":"text","value":" or a local repo.","position":{"start":{"line":195,"column":170,"offset":6685},"end":{"line":195,"column":187,"offset":6702},"indent":[]}}],"position":{"start":{"line":195,"column":1,"offset":6516},"end":{"line":195,"column":187,"offset":6702},"indent":[]}},{"type":"thematicBreak","position":{"start":{"line":197,"column":1,"offset":6704},"end":{"line":197,"column":4,"offset":6707},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"If you don't feel like mucking around with ","position":{"start":{"line":199,"column":1,"offset":6709},"end":{"line":199,"column":44,"offset":6752},"indent":[]}},{"type":"strong","children":[{"type":"text","value":"useRef","position":{"start":{"line":199,"column":46,"offset":6754},"end":{"line":199,"column":52,"offset":6760},"indent":[]}}],"position":{"start":{"line":199,"column":44,"offset":6752},"end":{"line":199,"column":54,"offset":6762},"indent":[]}},{"type":"text","value":" and ","position":{"start":{"line":199,"column":54,"offset":6762},"end":{"line":199,"column":59,"offset":6767},"indent":[]}},{"type":"strong","children":[{"type":"text","value":"useEffect","position":{"start":{"line":199,"column":61,"offset":6769},"end":{"line":199,"column":70,"offset":6778},"indent":[]}}],"position":{"start":{"line":199,"column":59,"offset":6767},"end":{"line":199,"column":72,"offset":6780},"indent":[]}},{"type":"text","value":", ","position":{"start":{"line":199,"column":72,"offset":6780},"end":{"line":199,"column":74,"offset":6782},"indent":[]}},{"type":"link","title":null,"url":"https://johnlindquist.com/use-greensock-with-react-hooks/","children":[{"type":"text","value":"John Lindquist","position":{"start":{"line":199,"column":75,"offset":6783},"end":{"line":199,"column":89,"offset":6797},"indent":[]}}],"position":{"start":{"line":199,"column":74,"offset":6782},"end":{"line":199,"column":149,"offset":6857},"indent":[]}},{"type":"text","value":" created a simple React hook called ","position":{"start":{"line":199,"column":149,"offset":6857},"end":{"line":199,"column":185,"offset":6893},"indent":[]}},{"type":"strong","children":[{"type":"text","value":"use-gsap","position":{"start":{"line":199,"column":187,"offset":6895},"end":{"line":199,"column":195,"offset":6903},"indent":[]}}],"position":{"start":{"line":199,"column":185,"offset":6893},"end":{"line":199,"column":197,"offset":6905},"indent":[]}},{"type":"text","value":" that hides them away.","position":{"start":{"line":199,"column":197,"offset":6905},"end":{"line":199,"column":219,"offset":6927},"indent":[]}}],"position":{"start":{"line":199,"column":1,"offset":6709},"end":{"line":199,"column":219,"offset":6927},"indent":[]}},{"type":"export","value":"export const _frontmatter = {\"title\":\"GreenSock Animations with React Hooks\",\"slug\":\"greensock-react\",\"updated\":\"2020-09-27T00:00:00.000Z\",\"published\":true,\"type\":[\"note\"],\"topics\":[\"React\",\"Scrollytelling\",\"Design\",\"JavaScript\",\"Web Development\",\"Greensock\"],\"growthStage\":\"Budding\"}","position":{"start":{"line":203,"column":1,"offset":6931},"end":{"line":203,"column":285,"offset":7215},"indent":[]}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":203,"column":285,"offset":7215}}},"scopeImports":["import * as React from 'react'"],"scopeIdentifiers":["React"],"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"GreenSock Animations with React Hooks\",\n  \"slug\": \"greensock-react\",\n  \"updated\": \"2020-09-27T00:00:00.000Z\",\n  \"published\": true,\n  \"type\": [\"note\"],\n  \"topics\": [\"React\", \"Scrollytelling\", \"Design\", \"JavaScript\", \"Web Development\", \"Greensock\"],\n  \"growthStage\": \"Budding\"\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar IntroParagraph = makeShortcode(\"IntroParagraph\");\nvar Footnote = makeShortcode(\"Footnote\");\nvar FullWidthImage = makeShortcode(\"FullWidthImage\");\nvar SimpleCard = makeShortcode(\"SimpleCard\");\nvar Center = makeShortcode(\"Center\");\nvar Tween = makeShortcode(\"Tween\");\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(IntroParagraph, {\n    mdxType: \"IntroParagraph\"\n  }, mdx(\"p\", null, \"Using the \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://greensock.com/\"\n  }), \"GreenSock\"), \" web animation library (also known as gsap) in vanilla JavaScript isn't too complex. But when we want it to play nicely with a frontend framework like React, we run into some finicky issues.\")), mdx(\"p\", null, \"This guide is specifically about using React Hooks with GreenSock, as many of the \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://greensock.com/react/\"\n  }), \"existing guides\"), \" only explain how to set it up with the old style of class components.\"), mdx(\"p\", null, \"This isn't an introduction to the GreenSock library itself \\u2013 head over to my post on \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"/greensock-essentials\"\n  }), \"The Bare Essentials of Greensock\"), \" for that.\"), mdx(\"br\", null), mdx(\"h2\", null, \"React, Meet GreenSock\"), mdx(\"p\", null, \"The issue with combining these two libraries is that React acts as a DOM interloper \\u2013 it sits between the code we write and the DOM, managing it for us.\"), mdx(\"p\", null, \"React builds it's own internal \\\"tree\\\" of DOM nodes based off our code, and only updates the actual DOM as needed (a concept previously known as the \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"/react-vdom\"\n  }), \"React Virtual DOM\"), \") \", mdx(Footnote, {\n    idName: 1,\n    mdxType: \"Footnote\"\n  }, \"The React team has gone off the term of the \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"virtual DOM\"), \" and prefer to talk about the \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"render tree\"), \". Potatoes, potataos. For more on how the virtual DOM works, I have an \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"/react-vdom\"\n  }), \"illustrated guide\"))), mdx(FullWidthImage, {\n    alt: \"A diagram of React generating all the DOM nodes for us\",\n    src: \"https://res.cloudinary.com/dg3gyk0gu/image/upload/c_scale,f_auto,q_100,w_1400/v1600973172/maggieappleton.com/notes/gsap/react-greensock-2.png\",\n    mdxType: \"FullWidthImage\"\n  }), mdx(\"p\", null, \"Meanwhile, the GreenSock library usually works by directly animating our DOM elements. Perhaps you can sense the tension in the room...\"), mdx(\"p\", null, \"Since the GreenSock library needs access to the DOM  in order to animate it, we need to tell React about our Greensock animations. Otherwise the two end up in awkward arguments that can end in tears (primarily mine).\"), mdx(\"br\", null), mdx(\"h2\", null, \"Bring in the React Hooks\"), mdx(\"p\", null, \"There's two essential React hooks we'll use to connect our React code to our  Greensock code: \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"useRef\"), \" and \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"useEffect\")), mdx(\"br\", null), mdx(SimpleCard, {\n    width: \"740px\",\n    mdxType: \"SimpleCard\"\n  }, mdx(\"h4\", null, mdx(\"strong\", {\n    parentName: \"h4\"\n  }, \"useRef\"), \" lets us access and directly target our DOM nodes\")), mdx(SimpleCard, {\n    width: \"740px\",\n    mdxType: \"SimpleCard\"\n  }, mdx(\"h4\", null, mdx(\"strong\", {\n    parentName: \"h4\"\n  }, \"useEffect\"), \" lets us to perform side effects \\u2013 any functions or data requests that we want to run \", mdx(\"em\", {\n    parentName: \"h4\"\n  }, \"after\"), \" rendering the component to the DOM\")), mdx(\"p\", null, \"If you're not completely comfortable with \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://www.freecodecamp.org/news/beginners-guide-to-using-react-hooks/\"\n  }), \"React Hooks\"), \" yet and those technical explanations mean nothing to you, don't worry we're going to slowly walk through this.  With illustrations. Because  who the fork properly understands \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"\\\"side effects\\\"\"), \"?\"), mdx(\"hr\", null), mdx(\"h3\", null, \"Getting Setup\"), mdx(\"p\", null, \"We first need to run \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"yarn install gsap\"), \" or \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"npm install gsap\"), \" into our React project repo \", mdx(Footnote, {\n    idName: 2,\n    mdxType: \"Footnote\"\n  }, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"gsap\"), \" is short for \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"GreenSock Animation Platform\"), \" and it's the way we reference the Greensock library in all our code sytax\")), mdx(\"br\", null), mdx(SimpleCard, {\n    width: \"740px\",\n    center: true,\n    mdxType: \"SimpleCard\"\n  }, mdx(\"p\", null, \"Feel free to open up a Codesandbox project to work through the steps while you read. I've set one up for you with React and Greensock already installed:\"), mdx(\"p\", null, mdx(\"a\", {\n    noTip: true,\n    href: \"https://codesandbox.io/s/reacthooks-greensock-demo-xjoti?file=/src/AnimatedBox.js\"\n  }, mdx(\"button\", {\n    style: {\n      marginTop: '0.2em'\n    }\n  }, \"Jump into CodeSandbox\"), \" \"))), mdx(\"br\", null), mdx(\"h3\", null, \"Building our Animation Component\"), mdx(\"p\", null, \"Let's start by creating a React component called \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"<AnimatedBox/>\"), \" that is going to hold all our Greensock code. We're going to build a simple  \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"<div>\"), \"  element and have it animate across the page (exciting!).\"), mdx(\"p\", null, \"We'll need to import the Greensock library into our component with \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"import { gsap }from 'gsap'\"), \", as well as React and our two hooks with \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"import React, { useRef, useEffect } from 'react'\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"import React, { useRef, useEffect } from 'react'\\nimport { gsap }from 'gsap'\\n\\nconst Animation = () => {\\n    return (\\n        <div style={{\\n            width: '160px',\\n            height: '160px',\\n            background: 'salmon'\\n        }} />\\n    )\\n}\\n\\n\")), mdx(\"p\", null, \"I've set some basic width, height, and colour CSS styles on our div to make it visible on the page.\"), mdx(\"div\", {\n    style: {\n      margin: '2em auto',\n      width: '160px',\n      height: '160px',\n      background: 'salmon',\n      borderRadius: '4px'\n    }\n  }), mdx(Center, {\n    mdxType: \"Center\"\n  }, mdx(\"p\", null, \"Good looking div, right?\", mdx(\"br\", {\n    parentName: \"p\"\n  }), \"\\n\", \"Salmon is always the right colour choice.\")), mdx(\"hr\", null), mdx(\"h2\", null, \"Adding the useRef Hook\"), mdx(\"p\", null, \"We're now going to add \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"references\"), \" to our animation with the \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"useRef\"), \" hook.\"), mdx(\"p\", null, \"We create a new reference by adding \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"const boxRef = useRef()\"), \" anywhere outside of our return statement. Call it anything you like, but \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"boxRef\"), \" is a good enough name for this example.\"), mdx(\"p\", null, \"We then add a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"ref={boxRef}\"), \" attribute on our \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"<div>\"), \" element.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"const Animation = () => {\\n    const boxRef = useRef()\\n\\n    return (\\n        <div ref={boxRef} style={{\\n            width: '160px',\\n            height: '160px',\\n            background: 'salmon'\\n        }} />\\n    )\\n}\\n\")), mdx(\"p\", null, \"This tells React we want to be able to control our \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"<div>\"), \" element with the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"boxRef\"), \" reference once our component is mounted onto the DOM.\"), mdx(\"hr\", null), mdx(\"h2\", null, \"Adding the useEffect Hook\"), mdx(\"p\", null, \"Next we're going to add our \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"useEffect\"), \" hook, and write our GreenSock animation inside of it.\"), mdx(\"p\", null, \"If you're already familiar with greensock this will look fairly straightforward.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"const Animation = () => {\\n    const boxRef = useRef()\\n\\n    useEffect(() => {\\n        gsap.to([boxRef.current], {\\n            x: '400px',\\n            duration: 2\\n        })\\n    })\\n\\n    return (\\n        <div ref={boxRef} style={{\\n            width: '160px',\\n            height: '160px',\\n            background: 'salmon'\\n        }} />\\n    )\\n}\\n\")), mdx(\"p\", null, \" We declare a normal \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"gsap.to()\"), \" tween, but instead of passing in an id or class name as the target element, we use \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"[boxRef.current]\"), \". \"), mdx(\"p\", null, \" This means we want gsap to animate the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \".current\"), \" property of our \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"boxRef\"), \" reference \\u2013 which is the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"<div>\"), \" element we put that reference on. \"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"gsap.to([boxRef.current], {\\n\\n})\\n\")), mdx(\"p\", null, \" We then pass in our variables object, which tells Greensock to move our div 400px along the \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"x\"), \" axis over a duration of 2 seconds:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"{ x: 400px, duration: 2 }\\n\")), mdx(\"p\", null, \"And thus, our div animates...\"), mdx(\"p\", null, mdx(Tween, {\n    to: {\n      scrollTrigger: {\n        trigger: '#boxRef',\n        start: 'top 60%',\n        end: '+=500',\n        scrub: true\n      },\n      x: '400px'\n    },\n    duration: 2,\n    ease: \"back.out(1.3)\",\n    mdxType: \"Tween\"\n  }, mdx(\"div\", {\n    id: \"boxRef\",\n    style: {\n      margin: '2em',\n      width: '160px',\n      height: '160px',\n      background: 'salmon',\n      borderRadius: '4px'\n    }\n  }))), mdx(Center, {\n    mdxType: \"Center\"\n  }, mdx(\"h1\", null, \"Tada \", mdx(\"span\", null, \"\\uD83C\\uDF89\"))), mdx(\"p\", null, \"So by this point, you hopefully have a working animation in that \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://codesandbox.io/s/reacthooks-greensock-demo-xjoti?file=/src/AnimatedBox.js\"\n  }), \"Codesandbox project\"), \" or a local repo.\"), mdx(\"hr\", null), mdx(\"p\", null, \"If you don't feel like mucking around with \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"useRef\"), \" and \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"useEffect\"), \", \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://johnlindquist.com/use-greensock-with-react-hooks/\"\n  }), \"John Lindquist\"), \" created a simple React hook called \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"use-gsap\"), \" that hides them away.\"));\n}\n;\nMDXContent.isMDXComponent = true;","rawMDXOutput":"/* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n/* @jsx mdx */\n\nexport const _frontmatter = {\n  \"title\": \"GreenSock Animations with React Hooks\",\n  \"slug\": \"greensock-react\",\n  \"updated\": \"2020-09-27T00:00:00.000Z\",\n  \"published\": true,\n  \"type\": [\"note\"],\n  \"topics\": [\"React\", \"Scrollytelling\", \"Design\", \"JavaScript\", \"Web Development\", \"Greensock\"],\n  \"growthStage\": \"Budding\"\n};\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n      console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n      return <div {...props}/>\n    };\nconst IntroParagraph = makeShortcode(\"IntroParagraph\");\nconst Footnote = makeShortcode(\"Footnote\");\nconst FullWidthImage = makeShortcode(\"FullWidthImage\");\nconst SimpleCard = makeShortcode(\"SimpleCard\");\nconst Center = makeShortcode(\"Center\");\nconst Tween = makeShortcode(\"Tween\");\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n    <IntroParagraph mdxType=\"IntroParagraph\">\n      <p>{`Using the `}<a parentName=\"p\" {...{\n          \"href\": \"https://greensock.com/\"\n        }}>{`GreenSock`}</a>{` web animation library (also known as gsap) in vanilla JavaScript isn't too complex. But when we want it to play nicely with a frontend framework like React, we run into some finicky issues.`}</p>\n    </IntroParagraph>\n    <p>{`This guide is specifically about using React Hooks with GreenSock, as many of the `}<a parentName=\"p\" {...{\n        \"href\": \"https://greensock.com/react/\"\n      }}>{`existing guides`}</a>{` only explain how to set it up with the old style of class components.`}</p>\n    <p>{`This isn't an introduction to the GreenSock library itself – head over to my post on `}<a parentName=\"p\" {...{\n        \"href\": \"/greensock-essentials\"\n      }}>{`The Bare Essentials of Greensock`}</a>{` for that.`}</p>\n    <br />\n    <h2>{`React, Meet GreenSock`}</h2>\n    <p>{`The issue with combining these two libraries is that React acts as a DOM interloper – it sits between the code we write and the DOM, managing it for us.`}</p>\n    <p>{`React builds it's own internal \"tree\" of DOM nodes based off our code, and only updates the actual DOM as needed (a concept previously known as the `}<a parentName=\"p\" {...{\n        \"href\": \"/react-vdom\"\n      }}>{`React Virtual DOM`}</a>{`) `}<Footnote idName={1} mdxType=\"Footnote\">{`The React team has gone off the term of the `}<em parentName=\"p\">{`virtual DOM`}</em>{` and prefer to talk about the `}<em parentName=\"p\">{`render tree`}</em>{`. Potatoes, potataos. For more on how the virtual DOM works, I have an `}<a parentName=\"p\" {...{\n          \"href\": \"/react-vdom\"\n        }}>{`illustrated guide`}</a></Footnote></p>\n    <FullWidthImage alt=\"A diagram of React generating all the DOM nodes for us\" src=\"https://res.cloudinary.com/dg3gyk0gu/image/upload/c_scale,f_auto,q_100,w_1400/v1600973172/maggieappleton.com/notes/gsap/react-greensock-2.png\" mdxType=\"FullWidthImage\" />\n    <p>{`Meanwhile, the GreenSock library usually works by directly animating our DOM elements. Perhaps you can sense the tension in the room...`}</p>\n    <p>{`Since the GreenSock library needs access to the DOM  in order to animate it, we need to tell React about our Greensock animations. Otherwise the two end up in awkward arguments that can end in tears (primarily mine).`}</p>\n    <br />\n    <h2>{`Bring in the React Hooks`}</h2>\n    <p>{`There's two essential React hooks we'll use to connect our React code to our  Greensock code: `}<strong parentName=\"p\">{`useRef`}</strong>{` and `}<strong parentName=\"p\">{`useEffect`}</strong></p>\n    <br />\n    <SimpleCard width=\"740px\" mdxType=\"SimpleCard\">\n      <h4><strong parentName=\"h4\">{`useRef`}</strong>{` lets us access and directly target our DOM nodes`}</h4>\n    </SimpleCard>\n    <SimpleCard width=\"740px\" mdxType=\"SimpleCard\">\n      <h4><strong parentName=\"h4\">{`useEffect`}</strong>{` lets us to perform side effects – any functions or data requests that we want to run `}<em parentName=\"h4\">{`after`}</em>{` rendering the component to the DOM`}</h4>\n    </SimpleCard>\n    <p>{`If you're not completely comfortable with `}<a parentName=\"p\" {...{\n        \"href\": \"https://www.freecodecamp.org/news/beginners-guide-to-using-react-hooks/\"\n      }}>{`React Hooks`}</a>{` yet and those technical explanations mean nothing to you, don't worry we're going to slowly walk through this.  With illustrations. Because  who the fork properly understands `}<em parentName=\"p\">{`\"side effects\"`}</em>{`?`}</p>\n    <hr></hr>\n    <h3>{`Getting Setup`}</h3>\n    <p>{`We first need to run `}<inlineCode parentName=\"p\">{`yarn install gsap`}</inlineCode>{` or `}<inlineCode parentName=\"p\">{`npm install gsap`}</inlineCode>{` into our React project repo `}<Footnote idName={2} mdxType=\"Footnote\"><strong parentName=\"p\">{`gsap`}</strong>{` is short for `}<em parentName=\"p\">{`GreenSock Animation Platform`}</em>{` and it's the way we reference the Greensock library in all our code sytax`}</Footnote></p>\n    <br />\n    <SimpleCard width=\"740px\" center mdxType=\"SimpleCard\">\n      <p>{`Feel free to open up a Codesandbox project to work through the steps while you read. I've set one up for you with React and Greensock already installed:`}</p>\n      <p><a noTip href=\"https://codesandbox.io/s/reacthooks-greensock-demo-xjoti?file=/src/AnimatedBox.js\"><button style={{\n            marginTop: '0.2em'\n          }}>Jump into CodeSandbox</button> </a></p>\n    </SimpleCard>\n    <br />\n    <h3>{`Building our Animation Component`}</h3>\n    <p>{`Let's start by creating a React component called `}<inlineCode parentName=\"p\">{`<AnimatedBox/>`}</inlineCode>{` that is going to hold all our Greensock code. We're going to build a simple  `}<inlineCode parentName=\"p\">{`<div>`}</inlineCode>{`  element and have it animate across the page (exciting!).`}</p>\n    <p>{`We'll need to import the Greensock library into our component with `}<inlineCode parentName=\"p\">{`import { gsap }from 'gsap'`}</inlineCode>{`, as well as React and our two hooks with `}<inlineCode parentName=\"p\">{`import React, { useRef, useEffect } from 'react'`}</inlineCode></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`import React, { useRef, useEffect } from 'react'\nimport { gsap }from 'gsap'\n\nconst Animation = () => {\n    return (\n        <div style={{\n            width: '160px',\n            height: '160px',\n            background: 'salmon'\n        }} />\n    )\n}\n\n`}</code></pre>\n    <p>I've set some basic width, height, and colour CSS styles on our div to make it visible on the page.</p>\n    <div style={{\n      margin: '2em auto',\n      width: '160px',\n      height: '160px',\n      background: 'salmon',\n      borderRadius: '4px'\n    }} />\n    <Center mdxType=\"Center\">\n      <p>{`Good looking div, right?`}<br parentName=\"p\"></br>{`\n`}{`Salmon is always the right colour choice.`}</p>\n    </Center>\n    <hr></hr>\n    <h2>{`Adding the useRef Hook`}</h2>\n    <p>{`We're now going to add `}<em parentName=\"p\">{`references`}</em>{` to our animation with the `}<strong parentName=\"p\">{`useRef`}</strong>{` hook.`}</p>\n    <p>{`We create a new reference by adding `}<inlineCode parentName=\"p\">{`const boxRef = useRef()`}</inlineCode>{` anywhere outside of our return statement. Call it anything you like, but `}<em parentName=\"p\">{`boxRef`}</em>{` is a good enough name for this example.`}</p>\n    <p>{`We then add a `}<inlineCode parentName=\"p\">{`ref={boxRef}`}</inlineCode>{` attribute on our `}<inlineCode parentName=\"p\">{`<div>`}</inlineCode>{` element.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`const Animation = () => {\n    const boxRef = useRef()\n\n    return (\n        <div ref={boxRef} style={{\n            width: '160px',\n            height: '160px',\n            background: 'salmon'\n        }} />\n    )\n}\n`}</code></pre>\n    <p>{`This tells React we want to be able to control our `}<inlineCode parentName=\"p\">{`<div>`}</inlineCode>{` element with the `}<inlineCode parentName=\"p\">{`boxRef`}</inlineCode>{` reference once our component is mounted onto the DOM.`}</p>\n    <hr></hr>\n    <h2>{`Adding the useEffect Hook`}</h2>\n    <p>{`Next we're going to add our `}<strong parentName=\"p\">{`useEffect`}</strong>{` hook, and write our GreenSock animation inside of it.`}</p>\n    <p>{`If you're already familiar with greensock this will look fairly straightforward.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`const Animation = () => {\n    const boxRef = useRef()\n\n    useEffect(() => {\n        gsap.to([boxRef.current], {\n            x: '400px',\n            duration: 2\n        })\n    })\n\n    return (\n        <div ref={boxRef} style={{\n            width: '160px',\n            height: '160px',\n            background: 'salmon'\n        }} />\n    )\n}\n`}</code></pre>\n    <p>{` We declare a normal `}<inlineCode parentName=\"p\">{`gsap.to()`}</inlineCode>{` tween, but instead of passing in an id or class name as the target element, we use `}<inlineCode parentName=\"p\">{`[boxRef.current]`}</inlineCode>{`. `}</p>\n    <p>{` This means we want gsap to animate the `}<inlineCode parentName=\"p\">{`.current`}</inlineCode>{` property of our `}<inlineCode parentName=\"p\">{`boxRef`}</inlineCode>{` reference – which is the `}<inlineCode parentName=\"p\">{`<div>`}</inlineCode>{` element we put that reference on. `}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`gsap.to([boxRef.current], {\n\n})\n`}</code></pre>\n    <p>{` We then pass in our variables object, which tells Greensock to move our div 400px along the `}<em parentName=\"p\">{`x`}</em>{` axis over a duration of 2 seconds:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`{ x: 400px, duration: 2 }\n`}</code></pre>\n    <p>{`And thus, our div animates...`}</p>\n    <p>\n      <Tween to={{\n        scrollTrigger: {\n          trigger: '#boxRef',\n          start: 'top 60%',\n          end: '+=500',\n          scrub: true\n        },\n        x: '400px'\n      }} duration={2} ease=\"back.out(1.3)\" mdxType=\"Tween\">\n    <div id=\"boxRef\" style={{\n          margin: '2em',\n          width: '160px',\n          height: '160px',\n          background: 'salmon',\n          borderRadius: '4px'\n        }} />\n      </Tween>\n    </p>\n    <Center mdxType=\"Center\">\n      <h1>{`Tada `}<span>{`🎉`}</span></h1>\n    </Center>\n    <p>{`So by this point, you hopefully have a working animation in that `}<a parentName=\"p\" {...{\n        \"href\": \"https://codesandbox.io/s/reacthooks-greensock-demo-xjoti?file=/src/AnimatedBox.js\"\n      }}>{`Codesandbox project`}</a>{` or a local repo.`}</p>\n    <hr></hr>\n    <p>{`If you don't feel like mucking around with `}<strong parentName=\"p\">{`useRef`}</strong>{` and `}<strong parentName=\"p\">{`useEffect`}</strong>{`, `}<a parentName=\"p\" {...{\n        \"href\": \"https://johnlindquist.com/use-greensock-with-react-hooks/\"\n      }}>{`John Lindquist`}</a>{` created a simple React hook called `}<strong parentName=\"p\">{`use-gsap`}</strong>{` that hides them away.`}</p>\n\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;"}}