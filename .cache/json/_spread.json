{"data":{"site":{"siteMetadata":{"title":"Maggie Appleton","description":"Maggie Appleton is an art director and anthropological designer. This is her digital garden for growing visual explanations about technology, culture, and programming","author":{"name":"Maggie Appleton"},"keywords":["Illustration, Tech"]}},"brainNote":{"slug":"spread","title":"JavaScript's ...spread Operator","childMdx":{"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"JavaScript's ...spread Operator\",\n  \"slug\": \"spread\",\n  \"updated\": \"2019-01-20T00:00:00.000Z\",\n  \"published\": true,\n  \"type\": [\"note\"],\n  \"topics\": [\"JavaScript\", \"Illustrated Notes\", \"Web Development\"],\n  \"growthStage\": \"Evergreen\"\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar IntroParagraph = makeShortcode(\"IntroParagraph\");\nvar BasicImage = makeShortcode(\"BasicImage\");\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(IntroParagraph, {\n    mdxType: \"IntroParagraph\"\n  }, mdx(\"p\", null, \"Spreading the elements from one array and copying them into is one of those handy shorthands for moving data around in JavaScript.\")), mdx(\"p\", null, \"I started looking into it after seeing  \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"<ComponentName {...props} />\"), \" in lots of React projects, and couldn't figure out what on earth was going on with the props syntax.\"), mdx(\"p\", null, \"Mystery solved...\"), mdx(BasicImage, {\n    alt: \"JavaScript's spread operator copies the content of one array, and dumps them out into another\",\n    src: \"https://res.cloudinary.com/dg3gyk0gu/image/upload/c_scale,w_900/v1592262848/maggieappleton.com/egghead-course-notes/Spread.png\",\n    mdxType: \"BasicImage\"\n  }), mdx(\"h4\", null, \"Want more illustrated notes on web development?\"), mdx(\"p\", null, \"Take a look at \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"/jsx\"\n  }), \"JSX is a Lovechild\"), \", \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"/compilers\"\n  }), \"How Are Compilers & Transpilers Different?\"), \" or \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"/fruit-comparison\"\n  }), \"A Fruitful Guide to JavaScript's Comparison Operators\")));\n}\n;\nMDXContent.isMDXComponent = true;","frontmatter":{"title":"JavaScript's ...spread Operator","updated":"Jan 20, 2019","startDate":null,"slug":"spread","topics":["JavaScript","Illustrated Notes","Web Development"],"growthStage":"Evergreen"}},"inboundReferenceNotes":[{"title":"JavaScript Bits You Skipped the First Time Around","slug":"advancedjs","childMdx":{"excerpt":"Being humans, we rarely learn things linearly. No one begins their JavaScript journey by reading  the TC39 language specification  line-by-line like a pedantic masochist. Instead we all cobble…"}},{"title":"A Fresh Serving of JavaScript ES2019","slug":"es2019","childMdx":{"excerpt":"A new version of JavaScript has landed! Every year JavaScript gets a handful of new features and functions for everyone to play with. The  TC39 committee  have  released the 2019 additions to…"}},{"title":"A Fruitful Guide to JavaScript's Comparison Operators","slug":"fruit-comparison","childMdx":{"excerpt":"Comparing values is one of those essential developer skills that helps you write  conditionals ,  if / then statements, filters , and plenty more. Here's the apples and oranges guide to using them in…"}},{"title":"JSX is a Lovechild","slug":"jsx","childMdx":{"excerpt":"If you've had the pleasure of trying to stumble your way through learning React, you'll have been through the adjustment phase with JSX. Putting HTML and JS side-by-side feels like it's violating the…"}}],"outboundReferenceNotes":[{"title":"JSX is a Lovechild","slug":"jsx","childMdx":{"excerpt":"If you've had the pleasure of trying to stumble your way through learning React, you'll have been through the adjustment phase with JSX. Putting HTML and JS side-by-side feels like it's violating the internet rules at first. It's just a new mashup - an awkward lovechild. Want…"}},{"title":"How Are Compilers & Transpilers Different?","slug":"compilers","childMdx":{"excerpt":"After learning about  Babel , I stumbled into the \"is Babel a compiler or a transpiler?\" debate. To help clarify things, I did a little research and illustrated it."}},{"title":"A Fruitful Guide to JavaScript's Comparison Operators","slug":"fruit-comparison","childMdx":{"excerpt":"Comparing values is one of those essential developer skills that helps you write  conditionals ,  if / then statements, filters , and plenty more. Here's the apples and oranges guide to using them in JavaScript. Want more illustrated notes on web development? Take a look at…"}}]}},"pageContext":{"slug":"spread"}}